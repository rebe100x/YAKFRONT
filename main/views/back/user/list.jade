mixin list()
	div.error#errContainer(style='display:none;')
		button.close(type="button", data-dismiss="alert") &times;
		span.alert#err(type="text", id="err", name="err")
	table#MyGrid.table.table-bordered.datagrid
		thead
			tr.headerControle
				th
					.datagrid-header-left
						.input-append.search
							input#search.input-medium(type='text', placeholder='Recherche', data-provide="typeahead", autocomplete="off")
							button.btn
								i.icon-search
			tr.headerControle
				td(colspan=6)
					select#filterStatus
						option(value="-1", "selected"="selected") Tous les utilisateurs
						option(value="2") En attente de validation
						option(value="1") Validés
						option(value="3") Blacklistés
						option(value="4") Doit remplir la page de première visite
					select#filterType
						option(value="0") Tous les types
						option(value="1") Normal
						option(value="2") Media
						option(value="3") Association
						option(value="4") Entreprise
						option(value="5") Institution
						option(value="10") Operator
						option(value="11") Super Admin
					
		tfoot
			tr
				th
					.datagrid-footer-left(style='display: none;')
						.grid-controls
							span
								span.grid-start
								| -
								span.grid-end
								| de
								span.grid-count
							select.grid-pagesize
								option 10
								option 20
								option 50
								option 100
							span Par Page
					.datagrid-footer-right(style='display: none;')
						.grid-pager
							button.btn.grid-prevpage
								i.icon-chevron-left
							span Page
							.input-append.dropdown.combobox.dropup
								input.span1(type='text')
								button.btn(data-toggle='dropdown')
									i.caret
								ul.dropdown-menu
							span
								| de
								span.grid-pages
							button.btn.grid-nextpage
								i.icon-chevron-right


	script

		var yakcatArray = [];
		var yakcatNames = [];
		var placeArray;
		var hashtag = [];
		var hashtagTmp = [];
		var firstLoad = true;

		var ApiDataSource = function (options) {
			this._formatter = options.formatter;
			this._columns = options.columns;
		};

		ApiDataSource.prototype = {

			columns: function () {
				return this._columns;
			},

			data: function (options, callback) {

				var url = '/api/users';
				var self = this;

				if (!options.search) {
					options.search = "^";
				}

				url += '/' + (options.pageIndex + 1);
				url += '/' + options.pageSize;
				url += '/' + options.search;

				var sortPropertyArray = [];
				var sortDirectionArray = [];

				// Add currently selected datagrid column to sort properties
				if (options.sortProperty) {
					sortPropertyArray.push(options.sortProperty);
					sortDirectionArray.push(options.sortDirection);
				}

				// Also sort by the selected date
				
				if (sortPropertyArray.length == 0) {
					sortPropertyArray.push('name');
					sortDirectionArray.push("-1");
				}
				// Would be easier if we could pass dictionaries, needs testing
				url += '/' + sortPropertyArray.join() + '/' + sortDirectionArray.join();

				// Filter by status
				var status = $('#filterStatus :selected').val();
				url += '/' + status;

				// Filter by type
				var type = $('#filterType :selected').val();
				url += '/' + type;

				// Optional filters: Yakcats, Users
				//  - Passed as query to allow for null
				var queryChar = '?';

				
				

				$.ajax(url, {
					type: 'GET'
				}).done(function (response) {

					if (firstLoad) {
						$("#search").focus();
						$('th[data-property="creationDate"]').addClass('sorted');
						$('th[data-property="creationDate"]').append('<i class="icon-chevron-down"></i>');
						firstLoad = false;
					}

					// Prepare data to return to Datagrid
					var data = response.user;
					var count = response.count;
					var startIndex = (response.pageIndex - 1) * response.pageSize;
					var endIndex = parseInt(startIndex) + parseInt(response.pageSize);
					var end = (endIndex > count) ? count : endIndex;
					var page = parseInt(response.pageIndex);
					var pages = Math.ceil(response.count / response.pageSize);
					var start = startIndex + 1;

					if (self._formatter) self._formatter(data);

					callback({ data: data, start: start, end: end, count: count, pages: pages, page: page });

				});
			}
		};

		$('#MyGrid').datagrid({
			dataSource: new ApiDataSource({
				columns: [
				{
					property: 'name',
					label: 'Utilisateur',
					sortable: true
				},
				{
					property: 'type',
					label: 'Type de compte',
					sortable: true
				},
				{
					property: 'status',
					label: "Statut <i class='icon-question-sign' id='statusHelp'></i>",
					sortable: true
				},
				{
					property: 'creationDate',
					label: 'Création',
					sortable: true
				}],
				formatter: function (items) {
					$.each(items, function (index, item) {
						item.name = fillContent(item);
						item.status = makeStatusDropDown(item);
						item.creationDate = formatDate(item.creationDate);
						item.type = makeTypeDropDown(item);
					});
				}
			})
		});

		
		function setNewStatus(el)
		{
			var _id = $(el).attr("rel");
			$.post("/user/setStatus", {status: $(el).val(), _id : $(el).attr("rel")}, function(data){
					if(data.meta.code == "200"){
						console.log(data);
						if(data.meta.mail == 1){
							$('#err').html('Un email a été envoyé !');
							$('#errContainer').show();
						}
							
						icon = 'icon-ok-sign';
						title_icon = "validé";
						if($(el).val() == 2){
								icon = 'icon-ban-circle';
								title_icon = "Inactive";
						}else if($(el).val() == 1){
								icon = 'icon-ok-sign';
								title_icon = "Active";
						}else if (item.status == 3) {
								icon = 'icon-ban-circle';
								title_icon = "Blacklisté";
						}else if (item.status == 4) {
								icon = 'icon-warning-sign';
								title_icon = "Doit remplir le formulaire de première visite";
							}
						$("#icon_"+_id).attr('class',icon).attr('title',title_icon);
					}
				});
		}

		function setNewType(el)
		{
			var _id = $(el).attr("rel");
			$(el).after("<span class='updateStatus'>loading...</span>");
			$(el).attr("disabled", "disabled");
			$.post("/user/setType", {type: $(el).val(), _id : $(el).attr("rel")}, function(data){
					if(data.meta.code == "200")
					{
						$(el).removeAttr("disabled");
						$(el).parent().find(".updateStatus").remove();
					}
				});
		}

		function makeStatusDropDown(item){
			var select = $("<div />");
			select.attr("class", "selectStatus");
			select.html('<select onchange="setNewStatus(this)" class="selectStatus" rel="'+item._id+'"><option value="2">En attente</option><option value="1">Validé</option><option value="3">Blacklisté</option><option value="4">Doit remplir la page de première visite</option></select>');
			select.find("option").each(function(){
				if($(this).attr("value") == item.status)
					$(this).attr("selected", "selected");
			});
			return select.html();
		}

		function makeTypeDropDown(item){
			var select = $("<div />");
			select.attr("class", "selectType");
			select.html('<select onchange="setNewType(this)" class="selectType" rel="'+item._id+'"><option value="1">Normal</option><option value="2">Premium Media</option><option value="3">Premium Association</option><option value="4">Premium Entreprise</option><option value="5">Premium Institution</option><option value="10">Backend Operator</option><option value="11">Backend Super Admin</option></select>');
			select.find("option").each(function(){
				if($(this).attr("value") == item.type)
					$(this).attr("selected", "selected");
			});
			return select.html();
		}

		function fillContent(item) {
			var res = "";
			var title_title = "";
			linkToFront = conf.fronturl+'/news/feed/?idprofile='+item._id;
			
			res += '<div class="liens">';
			if (item.status == 1 || item.status == 3) {
				res += '<a href=\''+ linkToFront + '\' target="_blank" title="Lien vers le profil"><i class="icon-share-alt "></i></a>';
				res += '<a class="centerMap" id="' + item._id + '" href="/#"><i class = "icon-map-marker" title="Localiser"></i></a>';
				
			}
			if (item.status == 2 || item.status == 4){
				res += '<a class="reminder"  id="' + item._id + '" href="/#" title="Renvoyer un mail de validation"><i class="icon-retweet"></i></a>';
				
			}
			res += "</div>";

			res += '<span>';

			if (item.status == 1) {
				icon = 'icon-ok-sign';
				title_icon = "validé";
			}
			else if (item.status == 2) {
				icon = 'icon-ban-circle';
				title_icon = "Waiting for validation";
			}
			else if (item.status == 3) {
				icon = 'icon-ban-circle';
				title_icon = "Blacklisté";
			}else if (item.status == 4) {
				icon = 'icon-warning-sign';
				title_icon = "Doit remplir le formulaire de première visite";
			}


			if(item.name.length > 50) {
				title_title = "title = '" + item.name + "'";
				item.name = item.name.slice(0, 50) + "...";
			}

			res += '<div class="text-info" '+ title_title + '><i id="icon_'+item._id+'"  class="' + icon + ' status" title="' + title_icon + '" ></i> <img src="'+item.thumbverysmall+'" />&nbsp;' + item.name +' ( ' + item.login +' ) '+ '</div>';

			res += "<small>";

			if (item.formatted_address)
				res += "<div>" + item.formatted_address + "</div>";

			res += '</small></span>';
			return res;
		}
		

		function formatDate(creationDate) {
			var dateTmp = new Date(creationDate);
			return dateTmp.getDate()+'/'+(dateTmp.getMonth()+1)+'/'+dateTmp.getFullYear();
		}

		$('a.centerMap').unbind('click').live('click', function() {
			var url = '/api/user/'+this.id;
			$.get(url,function (response){
				var user = response.user;
				var latlng = new google.maps.LatLng(user.location.lat, user.location.lng);
				placeMarker(latlng,markerLocation);
				map.setCenter(markerLocation.getPosition());
			});
			return false;
			
		});

		$('a.reminder').live('click', function() {
			var url = '/api/sendUserReminder/'+this.id;
			$(this).html('<img src="/images/loader.gif" />');
			$.get(url,function (response){
				if(response.meta.code == '200'){
					$('#err').html('Un email a été envoyé !');
					$('#errContainer').show();
					
				}else{
					$('#err').show().html("Erreur pendant l'envoi du mail!");
					$('#errContainer').show();
				}
			});
			$(this).html('<i class="icon-ok"></i>').css('cursor','default').attr('title','Un email a été envoyé');
			$(this).unbind('click').live('click', function() {return false;});

			return false;
		});

		// Refresh on sort selection
		$('#filterStatus').live('change', function() {
			var currentSelection = $('#filterStatus :selected').val();
			refreshDatagridAndMenu();
		});

		$('#filterType').live('change', function() {
			refreshDatagridAndMenu();
		});

		
	

		
		



		function refreshDatagridAndMenu () {
			// Temporary refresh method for datagrid
			var $gridsearch = jQuery('#MyGrid').find('.search');
			var search = $gridsearch.find('input').val();
			$gridsearch.trigger('searched', search);
		}


		$(document).ready(function() {
			$('#statusHelp').popover({animation:true,title:"Vous pouvez ici blacklister un utilisateur ou bien le débloquer en validant sont compte.",content:"<p><b>NB:</b>Si vous blacklistez un utilisateur, son compte sera immédiatement bloqué et les contenus postés via ce compte seront désactivés.<br> Un email lui sera envoyé pour le prévenir que son compte a été bloqué.<br><br> Cette opération de blacklistage est réversible, il suffit de remettre le statut à <i>Validé</i> et le compte est à nouveau opérationnel. Ses yassalas ré-apparaissent également.</p>",html:true});
		});