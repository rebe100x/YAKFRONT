mixin list()
	style
		.fuelux select { width: auto; max-width: 120px;} 
		.fuelux .datagrid tfoot .datagrid-footer-right .grid-pager .combobox { width: auto;}
		
	table#MyGrid.table.table-bordered.datagrid
		thead
			tr.headerControle
				th
					.datagrid-header-left
						.input-append.search
							input#search.input-medium(type='text', placeholder='Recherche', data-provide="typeahead", autocomplete="off")
							button.btn
								i.icon-search
						//		
							a.showSearchPanel(href="/place/list/#") Filtrer les résultats
								i.icon-chevron-right#iconSearchPanel
					//
						.datagrid-header-right
							button.btn#btnAdd
								i.icon-plus
								span Ajouter
				tr.headerControle.advancedSearch
					td.searchPanel(colspan=6, style="display:none")
						.yakCatFilter
							input#yakCat.typeahead(type="text", data-provide="typeahead", autocomplete="off", placeholder="Filtrer par thème")
							.pillbox#yakCatFilter(style="display:none")
								ul
						.userFilter
							input#userFilter.typeahead(type="text", data-provide="typeahead", autocomplete="off", placeholder="Filtrer par utilisateur")
							.pillbox#userFilter(style="display:none")
								ul
			tr.headerControle
				td(colspan=6)
					//
						.btn-group.batchActions
							button.btn.btn-small.validerPlaces(title="Valider les utilisateurs")
								i.icon-ok-sign
							button.btn.btn-small.disabled.enattentePlaces(title="Mettre les utilisateurs en attente")
								i.icon-time
							button.btn.btn-small.supprimerPlaces(title="Supprimer les utilisateurs")
								i.icon-ban-circle
					select#filterStatus
						option(value="2") En attente
						option(value="1") Validés
						option(value="3") Blacklistés
						option(value="4", "selected"="selected") Tous les utilisateurs
					select#filterType
						option(value="0") Tous les types
						option(value="1") Normal
						option(value="2") Media
						option(value="3") Association
						option(value="4") Entreprise
						option(value="5") Institution
						option(value="10") Operator
						option(value="11") Super Admin
					.dateSort.datagrid-header-right
						.input-prepend
							span.add-on Ordonner par
							select#sortPlaces
								option(value="creationDate")	Date de création
								option(value="nom") 		Nom
								option(value="status")	Status
								option(value="type")	Type
		tfoot
			tr
				th
					.datagrid-footer-left(style='display: none;')
						.grid-controls
							span
								span.grid-start
								| -
								span.grid-end
								| de
								span.grid-count
							select.grid-pagesize
								option 10
								option 20
								option 50
								option 100
							span Par Page
					.datagrid-footer-right(style='display: none;')
						.grid-pager
							button.btn.grid-prevpage
								i.icon-chevron-left
							span Page
							.input-append.dropdown.combobox.dropup
								input.span1(type='text')
								button.btn(data-toggle='dropdown')
									i.caret
								ul.dropdown-menu
							span
								| de
								span.grid-pages
							button.btn.grid-nextpage
								i.icon-chevron-right


	script

		var yakcatArray = [];
		var yakcatNames = [];
		var placeArray;
		var hashtag = [];
		var hashtagTmp = [];
		var firstLoad = true;

		var ApiDataSource = function (options) {
			this._formatter = options.formatter;
			this._columns = options.columns;
		};

		ApiDataSource.prototype = {

			columns: function () {
				return this._columns;
			},

			data: function (options, callback) {

				var url = '/api/users';
				var self = this;

				if (!options.search) {
					options.search = "^";
				}

				url += '/' + (options.pageIndex + 1);
				url += '/' + options.pageSize;
				url += '/' + options.search;

				var sortPropertyArray = [];
				var sortDirectionArray = [];

				// Add currently selected datagrid column to sort properties
				if (options.sortProperty) {
					sortPropertyArray.push(options.sortProperty);
					sortDirectionArray.push(options.sortDirection);
				}

				// Also sort by the selected date
				sortPropertyArray.push( $('#sortPlaces :selected').val() );
				// Always newest first
				sortDirectionArray.push("desc");

				// Would be easier if we could pass dictionaries, needs testing
				url += '/' + sortPropertyArray.join() + '/' + sortDirectionArray.join();

				// Filter by status
				var status = $('#filterStatus :selected').val();
				url += '/' + status;

				// Filter by type
				var type = $('#filterType :selected').val();
				url += '/' + type;

				// Optional filters: Yakcats, Users
				//  - Passed as query to allow for null
				var queryChar = '?';

				
				

				$.ajax(url, {
					type: 'GET'
				}).done(function (response) {

					if (firstLoad) {
						$("#search").focus();
						$('th[data-property="creationDate"]').addClass('sorted');
						$('th[data-property="creationDate"]').append('<i class="icon-chevron-down"></i>');
						firstLoad = false;
					}

					// Prepare data to return to Datagrid
					var data = response.user;
					var count = response.count;
					var startIndex = (response.pageIndex - 1) * response.pageSize;
					var endIndex = parseInt(startIndex) + parseInt(response.pageSize);
					var end = (endIndex > count) ? count : endIndex;
					var page = parseInt(response.pageIndex);
					var pages = Math.ceil(response.count / response.pageSize);
					var start = startIndex + 1;

					if (self._formatter) self._formatter(data);

					callback({ data: data, start: start, end: end, count: count, pages: pages, page: page });

				});
			}
		};

		$('#MyGrid').datagrid({
			dataSource: new ApiDataSource({
				columns: [
				{
					property: 'name',
					label: 'Nom',
					sortable: true
				},
				{
					property: 'type',
					label: 'Type',
					sortable: true
				},
				{
					property: 'status',
					label: 'Status',
					sortable: true
				},
				{
					property: 'creationDate',
					label: 'Création',
					sortable: true
				}],
				formatter: function (items) {
					$.each(items, function (index, item) {
						item.name = fillContent(item);
						item.status = makeStatusDropDown(item);
						item.creationDate = formatDate(item.creationDate);
						item.type = makeTypeDropDown(item);
					});
				}
			})
		});

		
		function setNewStatus(el)
		{
			var _id = $(el).attr("rel");
			$(el).after("<span class='updateStatus'>loading...</span>");
			$(el).attr("disabled", "disabled");
			$.post("/user/setStatus", {status: $(el).val(), _id : $(el).attr("rel")}, function(data){
					if(data.meta.code == "200")
					{
						$(el).removeAttr("disabled");
						$(el).parent().find(".updateStatus").remove();
					}
				});
		}

		function setNewType(el)
		{
			var _id = $(el).attr("rel");
			$(el).after("<span class='updateStatus'>loading...</span>");
			$(el).attr("disabled", "disabled");
			$.post("/user/setType", {type: $(el).val(), _id : $(el).attr("rel")}, function(data){
					if(data.meta.code == "200")
					{
						$(el).removeAttr("disabled");
						$(el).parent().find(".updateStatus").remove();
					}
				});
		}

		function makeStatusDropDown(item){
			var select = $("<div />");
			select.attr("class", "selectStatus");
			select.html('<select onchange="setNewStatus(this)" class="selectStatus" rel="'+item._id+'"><option value="2">En attente</option><option value="1">Validés</option><option value="3">Blacklistés</option></select>');
			select.find("option").each(function(){
				if($(this).attr("value") == item.status)
					$(this).attr("selected", "selected");
			});
			return select.html();
		}

		function makeTypeDropDown(item){
			var select = $("<div />");
			select.attr("class", "selectType");
			select.html('<select onchange="setNewType(this)" class="selectType" rel="'+item._id+'"><option value="1">Normal</option><option value="2">Media</option><option value="3">Association</option><option value="4">Entreprise</option><option value="5">Institution</option><option value="10">Operator</option><option value="11">Super Admin</option></select>');
			select.find("option").each(function(){
				if($(this).attr("value") == item.type)
					$(this).attr("selected", "selected");
			});
			return select.html();
		}

		function fillContent(item) {
			var res = "";
			var title_title = "";
			linkToFront = conf.fronturl+'/news/feed/?idprofile='+item._id;
			res += '<div class="liens">';
			res += '<a href=\''+ linkToFront + '\' target="_blank" title="Lien vers le profil"><i class="icon-share-alt "></i></a>';

			res += '<a class="centerMap" id="' + item._id + '" href="/#">';
			res += '<i class = "icon-map-marker" title="Localiser"></i>';
			res += '</a>';

			res += "</div>";

			res += '<span>';

			if (item.status == 1) {
				icon = 'icon-ok-sign';
				title_icon = "validé";
			}
			else if (item.status == 2) {
				icon = 'icon-ban-circle';
				title_icon = "Waiting for validation";
			}
			else if (item.status == 3) {
				icon = 'icon-warning-sign';
				title_icon = "Blacklisté";
			}else if (item.status == 4) {
				icon = 'icon-warning-sign';
				title_icon = "Doit passser par la page de première visite";
			}


			if(item.name.length > 50) {
				title_title = "title = '" + item.name + "'";
				item.name = item.name.slice(0, 50) + "...";
			}

			res += '<div class="text-info" '+ title_title + '><i class="' + icon + ' status" title="' + title_icon + '" ></i> <img src="'+item.thumbverysmall+'" />&nbsp;' + item.name +' ( ' + item.login +' ) '+ '</div>';

			res += "<small>";

			if (item.formatted_address)
				res += "<div>" + item.formatted_address + "</div>";

			if(item.tag) {
				res += displayFreeTags(item.tag);
				result = result.slice(0,-2);
			}

			res += '</small></span>';
			return res;
		}

		function displayFreeTags(freeTag) {
			var result = "";

			for(i = 0; i<  freeTag.length;i++){
				if (freeTag[i] != "") {
					result += freeTag[i];
					result += ', ';
				}
			}
			return result;
		}

		

		function formatDate(creationDate) {
			var dateTmp = new Date(creationDate);
			return dateTmp.getDate()+'/'+(dateTmp.getMonth()+1)+'/'+dateTmp.getFullYear();
		}

		$('a.centerMap').unbind('click').live('click', function() {
			var url = '/api/user/'+this.id;
			$.get(url,function (response){
				var user = response.user;
				var latlng = new google.maps.LatLng(user.location.lat, user.location.lng);
				placeMarker(latlng,markerLocation);
				map.setCenter(markerLocation.getPosition());
			});
			return false;
			
		});

		
		// Refresh on sort selection
		$('#sortPlaces').live('change', function() {
			refreshDatagridAndMenu();
		});
		// Refresh on sort selection
		$('#filterStatus').live('change', function() {
			var currentSelection = $('#filterStatus :selected').val();
			if (currentSelection == 1) {
				$('.validerPlaces').addClass('disabled');
				$('.supprimerPlaces').removeClass('disabled');
				$('.enattentePlaces').removeClass('disabled');
			}
			else if (currentSelection == 3) {
				$('.validerPlaces').removeClass('disabled');
				$('.enattentePlaces').removeClass('disabled');
				$('.supprimerPlaces').addClass('disabled');
			}
			else if (currentSelection == 2) {
				$('.validerPlaces').removeClass('disabled');
				$('.enattentePlaces').addClass('disabled');
				$('.supprimerPlaces').removeClass('disabled');
			}
			else {
				$('.validerPlaces').removeClass('disabled');
				$('.enattentePlaces').removeClass('disabled');
				$('.supprimerPlaces').removeClass('disabled');
			}

			refreshDatagridAndMenu();
		});

		$('#filterType').live('change', function() {
			refreshDatagridAndMenu();
		});

		
	

		$(".validerPlaces").live('click', function() {
			if ($(".validerPlaces").hasClass("disabled")) return;
			var vals = [];
			var i = 0;

			$(".selectYakPlace").each(function(){
				if ($(this).prop('checked') == true)
					vals[i++] = jQuery(this).val();
			});

			if (vals.length == 0) {
				// alert('Aucune place selectionnee.');
				return;
			}

			var url = '/api/places/validate/'+vals.toString();

			$.get(url, function(data) {
				if (data.result == -1)
					alert('Erreur lors de la validation');
				else {
					toastr.info('Validation de ' + data.result + ' lieu(x)');
					refreshDatagridAndMenu();
				}
			});

			return vals;
		});

		$(".supprimerPlaces").live('click', function() {
			if ($(".supprimerPlaces").hasClass("disabled")) return;
			var vals = [];
			var i = 0;

			$(".selectYakPlace").each(function(){
				if ($(this).prop('checked') == true)
					vals[i++] = jQuery(this).val();
			});

			if (vals.length == 0) {
				// alert('Aucune place selectionnee.');
				return;
			}

			var url = '/api/places/delete/'+vals.toString();

			$.get(url, function(data) {
				if (data.result == -1)
					alert('Erreur lors de la suppression');
				else {
					toastr.info('Suppression de ' + data.result + ' lieu(x)');
					refreshDatagridAndMenu();
				}
			});

			return vals;
		});

		$(".enattentePlaces").live('click', function() {
			if ($(".enattentePlaces").hasClass("disabled")) return;
			var vals = [];
			var i = 0;

			$(".selectYakPlace").each(function(){
				if ($(this).prop('checked') == true)
					vals[i++] = jQuery(this).val();
			});

			if (vals.length == 0) {
				// alert('Aucune place selectionnee.');
				return;
			}

			var url = '/api/places/wait/'+vals.toString();

			$.get(url, function(data) {
				if (data.result == -1)
					alert('Erreur lors de la suppression');
				else {
					// alert('Suppression de ' + data.result + ' place(s)');
					toastr.info('Mise en attente de ' + data.result + ' lieu(x)');
					refreshDatagridAndMenu();
				}
			});

			return vals;
		});


		function refreshDatagridAndMenu () {
			// Temporary refresh method for datagrid
			var $gridsearch = jQuery('#MyGrid').find('.search');
			var search = $gridsearch.find('input').val();
			$gridsearch.trigger('searched', search);
		}



		