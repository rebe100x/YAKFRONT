mixin list()
	style
		.fuelux select { width: auto; max-width: 120px;} 
		.fuelux .datagrid tfoot .datagrid-footer-right .grid-pager .combobox { width: auto;}
		
	table#MyGrid.table.table-bordered.datagrid
		thead
			tr.headerControle
				th
					.datagrid-header-left
						.input-append.search
							input#search.input-medium(type='text', placeholder='Recherche', data-provide="typeahead", autocomplete="off")
							button.btn
								i.icon-search
			tr.headerControle
				td(colspan=6)
					select#filterType
						option(value="0") Tous les types
						option(value="1") Info
						option(value="2") Commentaire
						option(value="3") Utilisateur
					select#filterStatus
						option(value="1",selected="selected") A vérifier
						option(value="2") Déjà vérifié

					.dateSort.datagrid-header-right
						.input-prepend
							span.add-on Ordonner par
							select#sortSelectBtn
								option(value="last_date_mark")	Dernier signalement
								option(value="type") Type
								option(value="content")	Contenu
								option(value="count") Nb de signalements

		tfoot
			tr
				th
					.datagrid-footer-left(style='display: none;')
						.grid-controls
							span
								span.grid-start
								| -
								span.grid-end
								| de
								span.grid-count
							select.grid-pagesize
								option 10
								option 25
								option 50
								option 100
							span Par Page
					.datagrid-footer-right(style='display: none;')
						.grid-pager
							button.btn.grid-prevpage
								i.icon-chevron-left
							span Page
							.input-append.dropdown.combobox.dropup
								input.span1(type='text')
								button.btn(data-toggle='dropdown')
									i.caret
								ul.dropdown-menu
							span
								| de
								span.grid-pages
							button.btn.grid-nextpage
								i.icon-chevron-right


	script

		var yakcatArray = [];
		var yakcatNames = [];
		var placeArray;
		var hashtag = [];
		var hashtagTmp = [];
		var firstLoad = true;
		var validillicites = 0;

		$(document).ready(function() {
			setInterval(function() {
				$.getJSON('/api/validillicites', function(data) {
					if(validillicites != data.info){
						$('#MyGrid').datagrid('reload');
						validillicites = data.info;
					}
					
					$('#illicitenumber').removeClass('badge badge-important');
					if (data.info != 0)
						$('#illicitenumber').addClass('badge badge-important').html(data.info);
				});

				

			}, 5000	);

			
		});
		var ApiDataSource = function (options) {
			this._formatter = options.formatter;
			this._columns = options.columns;
		};

		ApiDataSource.prototype = {

			columns: function () {
				return this._columns;
			},

			data: function (options, callback) {

				var url = '/api/illicites';
				var self = this;

				if (!options.search) {
					options.search = "^";
				}

				url += '/' + (options.pageIndex + 1);
				url += '/' + options.pageSize;
				url += '/' + options.search;

				var sortPropertyArray = [];
				var sortDirectionArray = [];

				// Add currently selected datagrid column to sort properties
				if (options.sortProperty) {
					sortPropertyArray.push(options.sortProperty);
					sortDirectionArray.push(options.sortDirection);
				}

				if(sortPropertyArray.length == 0)
					sortPropertyArray.push( $('#sortSelectBtn :selected').val() );
				if(sortDirectionArray.length == 0)
					sortDirectionArray.push("desc");

				//sortPropertyArray.push( $('#sortSelectBtn :selected').val() );
				//sortDirectionArray.push("desc");
					
				// Would be easier if we could pass dictionaries, needs testing
				url += '/' + sortPropertyArray.join() + '/' + sortDirectionArray.join();

				
				// Filter by type
				var type = $('#filterType :selected').val();
				url += '/' + type;
				// Filter by status
				var status = $('#filterStatus :selected').val();	
				url += '/' + status;
				// Optional filters: Yakcats, Users
				//  - Passed as query to allow for null
				var queryChar = '?';

				
				

				$.ajax(url, {
					type: 'GET'
				}).done(function (response) {

					if (firstLoad) {
						$("#search").focus();
						$('th[data-property="creationDate"]').addClass('sorted');
						$('th[data-property="creationDate"]').append('<i class="icon-chevron-down"></i>');
						firstLoad = false;
					}

					// Prepare data to return to Datagrid
					var data = response.illicites;
					var count = response.count;
					var startIndex = (response.pageIndex - 1) * response.pageSize;
					var endIndex = parseInt(startIndex) + parseInt(response.pageSize);
					var end = (endIndex > count) ? count : endIndex;
					var page = parseInt(response.pageIndex);
					var pages = Math.ceil(response.count / response.pageSize);
					var start = startIndex + 1;

					if (self._formatter) self._formatter(data);

					callback({ data: data, start: start, end: end, count: count, pages: pages, page: page });

				});
			}
		};

		$('#MyGrid').datagrid({
			dataSource: new ApiDataSource({
				columns: [
				{
					property: 'content',
					label: 'La donnée',
					sortable: true
				},
				{
					property: 'content_type',
					label: 'Type de donnée',
					sortable: true
				},
				{
					property: 'last_date_mark',
					label: 'Date de signalement',
					sortable: true
				},
				{
					property: 'count',
					label: 'Signalé',
					sortable: true
				},
				{
					property: 'delete',
					label: 'Supprimer',
					label: '<i class="icon-delete"></i>',
					sortable: true
				}
				],
				formatter: function (items) {
					$.each(items, function (index, item) {
						item.checked = makeCheckBox(item);
						item.delete = makeDeleteOption(item);
						item.last_date_mark = formatDate(item.last_date_mark);
						item.content_type = makeContentType(item.content_type);
						item.content = fillContent(item);
					});
				}
			})
		});

	
		function makeContent(item){
			var content = "<label>"+item.content+"<label>";
			return content;
		}
	
		function makeContentType(type){
			switch(type){
				case 1 : {
					return "Info";
					break;
				}
				case 2 : {
					return "Commentaire";
					break;
				}
				case 3 : {
					return "Utilisateur";
					break;
				}
				default :{
					return "Type inconnu";
					break;
				}
			}
		}
		
		
		function makeCheckBox(item) {
			return '<input type="checkbox" class="selectYakUser" value="' + item._id + '"/>';
		}

		function makeDeleteOption(item){
			console.log(item);
			var removeIcon = $("<i />");
			if(item.status == 1){
				removeIcon.attr("class", "icon-remove deleteAcomment");
				removeIcon.attr("val_content_id", item.content_id);
				removeIcon.attr("val_content_type", item.content_type);
				removeIcon.attr("val_id", item._id);
				if(typeof item.info_id != 'undefined' && item.info_id != '')
					removeIcon.attr("val_infoid", item.info_id);
				removeIcon.css("cursor", "pointer");
				if(item.content_type == 2)
					removeIcon.attr("title", "Attention une fois supprimés, les commentaires ne peuvent être rétablis!");
				else
					removeIcon.attr("title", "Supprimer cette donnée");
				removeIcon.attr("onclick", "changeStatusIllicite(this,2)");
			}else{
				removeIcon.attr("class", "icon-remove deleteAcomment");
				removeIcon.attr("val_content_id", item.content_id);
				removeIcon.attr("val_content_type", item.content_type);
				removeIcon.attr("val_id", item._id);
				removeIcon.css("cursor", "pointer");
				removeIcon.attr("title", "Rétablir cette donnée");
				removeIcon.attr("onclick", "changeStatusIllicite(this,1)");
			}
			return removeIcon[0].outerHTML;
		}

		function changeStatusIllicite(el,status)
		{
			var content_type = $(el).attr("val_content_type");
			var content_id = $(el).attr("val_content_id");
			var _id = $(el).attr("val_id");	
			// for comments push the infoID
			if(content_type == 2){
				var info_id = $(el).attr("val_infoid");
				console.log('elo'+info_id);	
			}
			else
				var info_id = '';

			console.log(info_id);
			$.post("/changeStatusIllicite/", {content_id: content_id, content_type: content_type, _id: _id,info_id:info_id,status:status}, function(data){
				$(el).parent().parent().hide();
			});
		}

		
		function setNewStatus(el){
			var _id = $(el).attr("rel");
			$(el).after("<span class='updateStatus'>loading...</span>");
			$(el).attr("disabled", "disabled");
			$.post("/user/setStatus", {status: $(el).val(), _id : $(el).attr("rel")}, function(data){
					if(data.meta.code == "200")
					{
						$(el).removeAttr("disabled");
						$(el).parent().find(".updateStatus").remove();
					}
				});
		}

		function fillContent(item) {
			var res = "";
			var icon = "icon-time";
			var title_icon = "En attente";
			var title_title = "";
			var linkToFront = conf.fronturl+'/news/feed/?id='+item.content_id;
			if(item.content_type == 'Utilisateur')
				linkToFront = conf.fronturl+'/news/feed/?idprofile='+item.content_id;

			res += '<div class="liens">';
			res += '<a href=\''+ linkToFront+ '\' target="_blank" title="Lien vers le front"><i class="icon-share-alt "></i></a>';

			res += '<a class="centerMap" id="' + item.content_id + '" href="/#">';
			res += '<i class = "icon-map-marker" title="Localiser"></i>';
			res += '</a>';

			res += "</div>";

			res += "<div class=''>"+item.content+"</div>";
			return res;
		}
		
		
		function formatDate(creationDate) {
			var dateTmp = new Date(creationDate);
			return dateTmp.getDate()+'/'+(dateTmp.getMonth()+1)+'/'+dateTmp.getFullYear();

		}

		$('a.centerMap').live('click', function() {
			var url = '/api/places/'+this.id;

			// We search for the place in mongo and we fill the form with the place's values
			$.ajax({
				url: url,
				type: 'GET',
				async: false,
				success: function (response)
				{
					var place = response.place;

					var latlng = new google.maps.LatLng(place.location.lat, place.location.lng);
					placeMarker(latlng,markerLocation);
					map.setCenter(markerLocation.getPosition());
				}
			});
		});

		
		

		// Refresh on sort selection
		$('#sortSelectBtn').live('change', function() {
			refreshDatagridAndMenu();
		});

		// Datagrid checkbox
		$('#filterStatus').live('change', function() {
			refreshDatagridAndMenu();
		});

		$('#filterType').live('change', function() {
			refreshDatagridAndMenu();
		});
		

		function refreshDatagridAndMenu () {
			// Temporary refresh method for datagrid
			var $gridsearch = jQuery('#MyGrid').find('.search');
			var search = $gridsearch.find('input').val();
			$gridsearch.trigger('searched', search);
			$.getJSON('/api/validillicites', function(data) {
				$('#illicitenumber').removeClass('badge badge-important');
				if (data.info != 0)
					$('#illicitenumber').addClass('badge badge-important').html(data.info);
			});
		}

		