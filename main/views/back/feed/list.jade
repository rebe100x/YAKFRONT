mixin list()
	table#MyGrid.table.table-bordered.datagrid
		thead
			tr.headerControle
				th
					.datagrid-header-left
						.input-append.search
							input#search.input-medium(type='text', placeholder='Recherche', data-provide="typeahead", autocomplete="off")
							button.btn
								i.icon-search
					.datagrid-header-right
						button.btn#btnAdd
							i.icon-plus
							span Ajouter
			tr.headerControle
				td(colspan=5)
					select#filterStatus
						option(value="1") Actifs
						option(value="0") Inactifs
					select#filterType
						option(value="all") Tous les types
						option(value="RSS") RSS
						option(value="CSV") CSV
						option(value="YAKMADE") YAKMADE
					
		tfoot
			tr
				th
					.datagrid-footer-left(style='display: none;')
						.grid-controls
							span
								span.grid-start
								| -
								span.grid-end
								| de
								span.grid-count
							select.grid-pagesize
								option 10
								option 20
								option 50
								option 100
							span Par Page
					.datagrid-footer-right(style='display: none;')
						.grid-pager
							button.btn.grid-prevpage
								i.icon-chevron-left
							span Page
							.input-append.dropdown.combobox.dropup
								input.span1(type='text')
								button.btn(data-toggle='dropdown')
									i.caret
								ul.dropdown-menu
							span
								| de
								span.grid-pages
							button.btn.grid-nextpage
								i.icon-chevron-right


	script
		

		

		var firstLoad = true;

		var ApiDataSource = function (options) {
			this._formatter = options.formatter;
			this._columns = options.columns;
		};

		ApiDataSource.prototype = {

			columns: function () {
				return this._columns;
			},

			data: function (options, callback) {

				var url = '/api/feeds';
				var self = this;

				if (!options.search) {
					options.search = "^";
				}

				url += '/' + (options.pageIndex + 1);
				url += '/' + options.pageSize;
				url += '/' + options.search;

				var sortPropertyArray = [];
				var sortDirectionArray = [];

				// Add currently selected datagrid column to sort properties
				if (options.sortProperty) {
					sortPropertyArray.push(options.sortProperty);
					sortDirectionArray.push(options.sortDirection);
				}

				// sort by name by default
				if(sortPropertyArray.length == 0)
					sortPropertyArray.push( "humanName");
				// Always newest first
				sortDirectionArray.push("asc");

				// Would be easier if we could pass dictionaries, needs testing
				url += '/' + sortPropertyArray.join() + '/' + sortDirectionArray.join();

				// Filter by status
				var status = $('#filterStatus :selected').val();
				url += '/' + status;

				// Filter by type
				var type = $('#filterType :selected').val();
				url += '/' + type;

				

				
				$.ajax(url, {
					type: 'GET'
				}).done(function (response) {

					if (firstLoad) {
						$("#search").focus();
						$('th[data-property="name"]').addClass('sorted');
						$('th[data-property="name"]').append('<i class="icon-chevron-down"></i>');
						firstLoad = false;
					}

					// Prepare data to return to Datagrid
					var data = response.feed;
					var count = response.count;
					var startIndex = (response.pageIndex - 1) * response.pageSize;
					var endIndex = parseInt(startIndex) + parseInt(response.pageSize);
					var end = (endIndex > count) ? count : endIndex;
					var page = parseInt(response.pageIndex);
					var pages = Math.ceil(response.count / response.pageSize);
					var start = startIndex + 1;

					if (self._formatter) self._formatter(data);

					callback({ data: data, start: start, end: end, count: count, pages: pages, page: page });

				});
			}
		};

		$('#MyGrid').datagrid({
			dataSource: new ApiDataSource({
				columns: [
				{
					property: 'name',
					label: 'Flux',
					sortable: true
				},
				{
					property: 'feedType',
					label: 'Type',
					sortable: true
				},
				{
					property: 'defaultPlaceSearchName',
					label: 'Zone',
					sortable: true
				},
				{
					property: 'creationDate',
					label: 'Création',
					sortable: true
				}],
				formatter: function (items) {
					$.each(items, function (index, item) {
						item.name = fillContent(item);
						item.creationDate = formatDate(item.creationDate);
					});
				}
			})
		});


		$('#filterStatus').live('change', function() {
			var currentSelection = $('#filterStatus :selected').val();
			refreshDatagrid();
		});

		$('#filterType').live('change', function() {
			var currentSelection = $('#filterType :selected').val();
			refreshDatagrid();
		});

		function fillContent(item) {
			var res = "";
			var icon = "icon-time";
			var title_icon = "En attente";
			var title_title = "";

			
			res += '<div class="liens">';
			if (item.link)
				res += '<a href=\''+ item.link + '\' target="_blank" title="Lien externe"><i class="icon-share-alt "></i></a>';	

			if (typeof item.defaultPlaceLocation != 'undefined'
				&& typeof item.defaultPlaceLocation.lat != 'undefined'
				&& typeof item.defaultPlaceLocation.lng != 'undefined' ){
				res += '<a class="centerMap" id="' + item._id + '" lat="' + item.defaultPlaceLocation.lat + '" lng="' + item.defaultPlaceLocation.lng + '"   href="#">';
			res += '<i class = "icon-map-marker" title="Localiser"></i>';
			res += '</a>';

				}	
			
			res += "</div>";

			res += '<a class="editFeed" id="' + item._id + '" href="#">';

			if (item.status == 1) {
				icon = 'icon-ok-sign';
				title_icon = "Validée";
			}
			else {
				icon = 'icon-ban-circle';
				title_icon = "Rejetée";
			}

			res += 	'<div class="text-info"><i class="' + icon + ' status" title="' + title_icon + '" ></i>' + item.humanName + '</div>';

			res += '</a>';

			return res;
		}

		function formatDate(creationDate) {
			var dateTmp = new Date(creationDate);
			return dateTmp.getDate()+'/'+(dateTmp.getMonth()+1)+'/'+dateTmp.getFullYear();

		}


		$('a.centerMap').live('click', function(event) {
			event.preventDefault();
			var latlng = new google.maps.LatLng($(this).attr('lat'), $(this).attr('lng'));
			//getformattedAddress(latlng);
			placeMarker(latlng,markerLocation);
			map.setCenter(latlng);
		});


		// Refresh on sort selection
		$('#sortPlaces').live('change', function() {
			refreshDatagrid();
		});
		

	
		function refreshDatagrid () {
			// Temporary refresh method for datagrid
			var $gridsearch = jQuery('#MyGrid').find('.search');
			var search = $gridsearch.find('input').val();
			$gridsearch.trigger('searched', search);
		}

		
		// Edit Feed function
		$("#MyGrid").unbind("click").on('click','.editFeed', function(event)
		{
			event.preventDefault();
			event.stopPropagation();
			
			listenerHandle = google.maps.event.addListener(map, 'click', function(event) {
				placeMarker(event.latLng,markerLocation);
			});

			listenerHandleDrag = google.maps.event.addListener(markerLocation, 'dragend', function() {
				var position = markerLocation.getPosition();
				$('#feedForm #latitude').val(position.lat());
				$('#feedForm #longitude').val(position.lng());
			});


			$("#MyGrid").hide();
			

			// We remove the error class when we open a form for editing a place
			$('#feedform #titleGroup').removeClass("error");
			$('#feedform #contentGroup').removeClass("error");
			$('#feedform #licenceGroup').removeClass("error");
			$('#feedform #origineGroup').removeClass("error");
			$('#feedform #adresseGroup').removeClass("error");

			$("#btnBack").show().unbind('click').on('click',function(){
				$("#feedform").hide();
				$("#MyGrid").show();
				$("#pillSource ul").html('');
				$("#pillYakcat ul").html('');
				$("#pillFreetag ul").html('');
				google.maps.event.removeListener(listenerHandle);
				markerLocation.setVisible(false);					
				$("#feedform input[type=hidden]").val('');
			});

			$("#feedform").show();
			$("#feedform legend.mainlegend").html("Modifier un flux");
			$(".catLabel").remove();
			$("#pillYakcat ul").empty();
			$('#err').hide();
			yakcatArray = new Array();
			yakcatNames = new Array();

			$("#feedform #objid").val(this.id);

			var url = '/api/feed/'+this.id;
			
			// We search for the feed in mongo and we fill the form with the feed's values
			$.ajax({
				url: url,
				type: 'GET',
				async: false,
				success: function (response)
				{
					var feed = response.feed;
					
					$("#feedform #humanName").val(feed.humanName);
					$("#feedform #licence").val(feed.licence);
					$("#feedform #link").val(feed.link);
					$('#feedform #persistDays input').val($('#feedform #persistDays').find('li[data-value='+feed.persistDays+']').text());
					feed.yakCatNameArray.forEach(function(cat){
						$("#pillYakcat").show();
						$("#pillYakcat ul").append("<li class='yakcat-val status-important' data-value='id'>"+cat+"</li>");
					});
					
					feed.tag.forEach(function(tag){
						$("#pillFreetag").show();
						$("#pillFreetag ul").append("<li class='freetag-val status-info' data-value='id'>"+tag+"</li>");
					});
					
					if(typeof feed.defaultPlaceLocation != 'undefined'){
						var latlng = new google.maps.LatLng(feed.defaultPlaceLocation.lat, feed.defaultPlaceLocation.lng);
						placeMarker(latlng,markerLocation);
						map.setCenter(markerLocation.getPosition());
						$("#feedform #longitude").val(feed.defaultPlaceLocation.lng);
						$("#feedform #latitude").val(feed.defaultPlaceLocation.lat);
						$("#feedform #address").val(feed.defaultPlaceSearchName);
						$("#feedform #place").val(feed.defaultPlaceSearchName);
					}
					$("#feedform #defaultPrintFlag").val(feed.defaultPrintFlag);
					
					$("#feedform #feedType").val(feed.feedType);
					

					$('#feedform input:radio[name=yakType][value='+feed.yakType+']').attr("checked", true).trigger("change").button('refresh');
					
					
					if(feed.fileSource.length>0){
						$("#pillSource").show();
						$("#pillSource ul").append("<li class='source-val status-success' data-value='"+feed.fileSource+"'>"+feed.fileSource+"</li>");
					}
						
					
					feed.linkSource.forEach(function(source){
						if(source.length>0){
							$("#pillSource").show();
							$("#pillSource ul").append("<li class='source-val status-success' data-value='"+source+"'>"+source+"</li>");	
						}
						
					});


					$('#feedform input:radio[name=status][value='+feed.status+']').attr("checked", true).trigger("change").button('refresh');



					$("#feedform #humanName").focus();
					

					
					if (feed.parsingTemplate)
					{
						$("#feedform #infoTitle").val(feed.parsingTemplate.title);	
						$("#feedform #infoContent").val(feed.parsingTemplate.content);	
						$("#feedform #infoAddress").val(feed.parsingTemplate.address);	
						$("#feedform #infoLatitude").val(feed.parsingTemplate.latitude);	
						$("#feedform #infoLongitude").val(feed.parsingTemplate.longitude);	
						$("#feedform #infoLink").val(feed.parsingTemplate.outGoingLink);	
						$("#feedform #infoThumb").val(feed.parsingTemplate.thumb);	
						$("#feedform #infoCat").val(feed.parsingTemplate.yakCats);	
						$("#feedform #infoTag").val(feed.parsingTemplate.tag);	
						$("#feedform #infoPlace").val(feed.parsingTemplate.place);	
						$("#feedform #infoEventDate").val(feed.parsingTemplate.eventDate);	
						$("#feedform #infoPubDate").val(feed.parsingTemplate.pubDate);	
						$("#feedform #infoTel").val(feed.parsingTemplate.telephone);
						$("#feedform #infoMail").val(feed.parsingTemplate.mail);
						$("#feedform #infoTransportation").val(feed.parsingTemplate.transportation);
						$("#feedform #infoWeb").val(feed.parsingTemplate.web);
						$("#feedform #infoOpening").val(feed.parsingTemplate.opening);
					}
				}
			});
		});

		// Add Feed function
		$("#btnAdd").click(function()
		{

			var user = !{JSON.stringify(user)};
			
			event.preventDefault();
			listenerHandle = google.maps.event.addListener(map, 'click', function(event) {
				getformattedAddress(event.latLng);
				placeMarker(event.latLng,markerLocation);
			});
			listenerHandleDrag = google.maps.event.addListener(markerLocation, 'dragend', function() {
				var position = markerLocation.getPosition();
				$('#feedform #latitude').val(position.lat());
				$('#feedform #longitude').val(position.lng());

				getformattedAddress(position);
			});

			$("#MyGrid").hide();
			$("#feedform")[0].reset();
			// We remove the error class when we open a form for creating a new place
			$('#feedform #titleGroup').removeClass("error");
			$('#feedform #contentGroup').removeClass("error");
			$('#feedform #licenceGroup').removeClass("error");
			$('#feedform #origineGroup').removeClass("error");
			$('#feedform #adresseGroup').removeClass("error");
			$('#feedform #content').val("");
			$('#placeLabel').first().remove();
			$("#btnBack").fadeIn();
			$("#feedform").fadeIn();
			$("#feedform legendmainlegend").html("Ajouter un lieu");
			$("#feedform #objid").val("");
			$(".catLabel").remove();
			$("#pillYakcat ul").empty();
			$('#err').hide();
			$("#feedform #title").focus();
			$("#feedform #hiddenOrigin").val(user.login);
			$("#feedform #origine").val(user.login);
			$("#feedform #origine").prop('disabled', true);
			yakcatArray = new Array();
			yakcatNames = new Array();
		});


		






	