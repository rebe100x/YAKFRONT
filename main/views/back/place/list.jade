mixin list()
	table#MyGrid.table.table-bordered.datagrid
		thead
			tr.headerControle
				th
					.datagrid-header-left
						.input-append.search
							input#search.input-medium(type='text', placeholder='Recherche', data-provide="typeahead", autocomplete="off")
							button.btn
								i.icon-search
						a.showSearchPanel(href="#") &nbsp;Recherche avancée
							i.icon-chevron-right#iconSearchPanel
					.datagrid-header-right
						label
							input#limit10days(type="checkbox",style="margin-top:-1px;",checked="checked") 
							span &nbsp;Limiter aux 10 derniers jours&nbsp;&nbsp;&nbsp;
							button.btn#btnAdd
								i.icon-plus
								span Ajouter
				tr.headerControle.advancedSearch
					td.searchPanel(colspan=5, style="display:none")
						.yakCatFilter
							input#yakCat.typeahead(type="text", data-provide="typeahead", autocomplete="off", placeholder="Filtrer par catégorie")
							.pillbox#yakCatFilter(style="display:none")
								ul
						.userFilter
							input#userFilter.typeahead(type="text", data-provide="typeahead", autocomplete="off", placeholder="Filtrer par utilisateur")
							.pillbox#userFilter(style="display:none")
								ul
						.feedFilter
							input#feedFilter.typeahead(type="text", data-provide="typeahead", autocomplete="off", placeholder="Filtrer par flux")
							.pillbox#feedFilter(style="display:none")
								ul
			tr.headerControle
				td(colspan=5)
					//
						.btn-group.batchActions
							button.btn.btn-small.validerPlaces(title="Valider les lieux")
								i.icon-ok-sign
							button.btn.btn-small.disabled.enattentePlaces(title="Mettre les lieux en attente")
								i.icon-time
							button.btn.btn-small.supprimerPlaces(title="Rejeter les lieux")
								i.icon-ban-circle
					select#filterStatus
						option(value="all") Tous les statuts
						option(value="1") Validé
						option(value="3") Désactivé
						option(value="alert", selected="selected") En alerte
						option(value="2") - Alerte: En attente
						option(value="10") - Alerte: Gmap a échoué
						option(value="11") - Alerte: Le lieu matché est désactivé
						option(value="12") - Alerte: Localisation hors zone
						option(value="13") - Alerte: La géoloc a échoué
						
					.dateSort.datagrid-header-right
						.input-prepend
							span.add-on Ordonner par
							select#sortPlaces
								option(value="creationDate")	Date de création
								option(value="pubDate") 		Date de publication
								option(value="lastModifDate")	Date de modification
		tfoot
			tr
				th
					.datagrid-footer-left(style='display: none;')
						.grid-controls
							span
								span.grid-start
								| -
								span.grid-end
								| de
								span.grid-count
							select.grid-pagesize
								option 10
								option 20
								option 50
								option 100
							span Par Page
					.datagrid-footer-right(style='display: none;')
						.grid-pager
							button.btn.grid-prevpage
								i.icon-chevron-left
							span Page
							.input-append.dropdown.combobox.dropup
								input.span1(type='text')
								button.btn(data-toggle='dropdown')
									i.caret
								ul.dropdown-menu
							span
								| de
								span.grid-pages
							button.btn.grid-nextpage
								i.icon-chevron-right


	script

		var yakcatArray = [];
		var yakcatNames = [];
		var placeArray;
		var hashtag = [];
		var hashtagTmp = [];
		var firstLoad = true;


		$("#pillYakcat").show();
		$("#pillFreetag").show();
		

		$(document).ready(function() {
			if($.cookie("statusPlace")){
					var status = $.cookie("statusPlace");
					$('#filterStatus').val(status);
			}
			
			var idplace = "!{idplace}";
			if(idplace){
				editPlace(idplace,0);
			}

			$('#MyGrid').datagrid({
				dataSource: new ApiDataSource({
					columns: [/*{
						property: 'checked',
						label: '<input id="selectAllPlaces" type="checkbox" />',
						sortable: false
					},*/
					{
						property: 'title',
						label: 'Lieux',
						sortable: true
					},
					{
						property: 'status',
						label: "Statut <i class='icon-question-sign' id='statusHelp'></i>",
						sortable: true
					},
					{
						property: 'origin',
						label: 'Origine',
						sortable: true
					},
					{
						property: 'creationDate',
						label: 'Création',
						sortable: true
					}],
					formatter: function (items) {
						$.each(items, function (index, item) {
							item.checked = makeCheckBox(item);
							item.title = fillContent(item);
							item.status = makeStatusDropDown(item);
							item.origin = formatOrigin(item);
							item.creationDate = formatDate(item.creationDate);
						});
					}
				})
			});
		});
				
		/****************************************************************** LIST GRID ***************************************************************************/

		var ApiDataSource = function (options) {
			this._formatter = options.formatter;
			this._columns = options.columns;
		};

		ApiDataSource.prototype = {

			columns: function () {return this._columns;},

			data: function (options, callback) {

				var url = '/api/places';
				var self = this;

				if (!options.search) {
					options.search = "^";
				}

				url += '/' + (options.pageIndex + 1);
				url += '/' + options.pageSize;
				url += '/' + options.search;

				var sortPropertyArray = [];
				var sortDirectionArray = [];

				// Add currently selected datagrid column to sort properties
				if (options.sortProperty) {
					sortPropertyArray.push(options.sortProperty);
					sortDirectionArray.push(options.sortDirection);
				}

				// Also sort by the selected date
				sortPropertyArray.push( $('#sortPlaces :selected').val() );
				// Always newest first
				sortDirectionArray.push("desc");

				// Would be easier if we could pass dictionaries, needs testing
				url += '/' + sortPropertyArray.join() + '/' + sortDirectionArray.join();

				// Filter by status
				var status = $('#filterStatus :selected').val();
				url += '/' + status;

				// Optional filters: Yakcats, Users
				//  - Passed as query to allow for null
				var queryChar = '?';

				var limit10days = ($("#limit10days").is(":checked"));
				url += '/' + limit10days;

				// Filter by yakCats
				var catPillboxItems = $(".pillbox#yakCatFilter").pillbox("items");
				if (catPillboxItems.length) {
					var apiCatArray = [];

					$(catPillboxItems).each(function() {
						apiCatArray.push(this.value);
					});

					url += queryChar + "yakcats=" + apiCatArray.join();
					queryChar = '&';
				}

				// Filter by users
				var userPillboxItems = $(".pillbox#userFilter").pillbox("items");
				if (userPillboxItems.length) {
					var userArray = [];

					$(userPillboxItems).each(function() {
						userArray.push(this.value);
					});

					url += queryChar + "users=" + userArray.join();
				}


				// Filter by feeds
				var feedPillboxItems = $(".pillbox#feedFilter").pillbox("items");
				if (feedPillboxItems.length) {
					var feedArray = [];

					$(feedPillboxItems).each(function() {
						feedArray.push(this.value);
					});

					url += queryChar + "feeds=" + feedArray.join();
				}

				

				$.ajax(url, {
					type: 'GET'
				}).done(function (response) {

					if (firstLoad) {
						$("#search").focus();
						$('th[data-property="creationDate"]').addClass('sorted');
						$('th[data-property="creationDate"]').append('<i class="icon-chevron-down"></i>');
						firstLoad = false;
					}

					// Prepare data to return to Datagrid
					var data = response.place;
					var count = response.count;
					var startIndex = (response.pageIndex - 1) * response.pageSize;
					var endIndex = parseInt(startIndex) + parseInt(response.pageSize);
					var end = (endIndex > count) ? count : endIndex;
					var page = parseInt(response.pageIndex);
					var pages = Math.ceil(response.count / response.pageSize);
					var start = startIndex + 1;

					if (self._formatter) self._formatter(data);

					callback({ data: data, start: start, end: end, count: count, pages: pages, page: page });

				});
			}
		};

		

		function makeStatusDropDown(item){
			var select = $("<div />");
			select.attr("class", "selectStatus");
			select.html('<select onchange="setNewStatus(this)" class="selectStatus" rel="'+item._id+'"><option value="0">Changer le statut</option><option value="1">Valider (lieu + infos liées)</option><option value="2">En attente (lieu + infos liées)</option><option value="3">Désactiver ce lieu uniquement</option><option value="4">Désactiver ce lieu + infos liées</option></select>');
			select.find("option").each(function(){
				if($(this).attr("value") == 0)
					$(this).attr("selected", "selected");
			});
			return select.html();
		}

		function setNewStatus(el){
			var _id = $(el).attr("rel");
			console.log(_id+'  '+$(el).val());
			if($(el).val() > 0){
				$.post("/place/setStatus", {status: $(el).val(), _id : $(el).attr("rel")}, function(data){
					if(data.meta.code == "200"){
						console.log(data);
						icon = 'icon-ok-sign';
						title_icon = "Validé";
						if ($(el).val() == 1) {
							icon = 'icon-ok-sign';
							title_icon = "Validé";
						}else if($(el).val() == 2){
							icon = 'icon-exclamation-sign';
							title_icon = "En Attente";
						}else if($(el).val() == 3){
							icon = 'icon-ban-circle';
							title_icon = "Désactivé";
						}else {
							icon = 'icon-warning-sign';
							if($(el).val() == 10)
								title_icon = "Alerte: GMAP n'a pas retourné de valeur";
							if($(el).val() == 11)
								title_icon = "Alerte: matching sur un lieu désactivé";
							if($(el).val() == 12)
								title_icon = "Alerte: le lieu trouvé est hors de la zone";
							if($(el).val() == 13)
								title_icon = "Alerte: pas de lieu trouvé";
						}
						$("#icon_"+_id).attr('class',icon).attr('title',title_icon);

						refreshDatagridAndMenu();
					}
				});
			}
		}

		function formatOrigin(item) {
			if (item.origin)
				return item.origin
			return "Origine inconnue";
		}

		function makeCheckBox(item) {
			return '<input type="checkbox" class="selectYakPlace" value="' + item._id + '"/>';
		}

		function formatYakcat(yakcatId) {
			var res;
			$.ajax({
				url: '/api/cats/'+ yakcatId,
				dataType: 'json',
				async: false,
				success: function(data) {
					if (data['cat'])
						res = data['cat'].title;
				}
			});
			return res;
		}

		function formatDate(creationDate) {
			var dateTmp = new Date(creationDate);
			return dateTmp.getDate()+'/'+(dateTmp.getMonth()+1)+'/'+dateTmp.getFullYear();

		}

		function displayFreeTags(freeTag) {
			var result = "";

			for(i = 0; i<  freeTag.length;i++){
				if (freeTag[i] != "") {
					result += freeTag[i];
					result += ', ';
				}
			}

			return result;
		}

		function fillContent(item) {
			var res = "";
			var icon = "icon-time";
			var title_icon = "En attente";
			var title_title = "";

			res += '<div class="liens">';

			res += '<a href="#" id="'+item._id+'" class="duplicateItem listIcon" title="Dupliquer"><i class="icon-random"></i></a>';

			if (item.outGoingLink)
				res += '<a href=\''+ item.outGoingLink + '\' target="_blank" title="Lien externe"><i class="icon-share-alt "></i></a>';

			if(typeof item.location != 'undefined' && item.location.lat > 0 && item.location.lng > 0){
				res += '<a class="centerMap" id="' + item._id + '" lat="'+item.location.lat+'" lng="'+item.location.lng+'" href="#">';
				res += '<i class = "icon-map-marker" title="Localiser"></i>';
				res += '</a>';
			}

			if(typeof item.debugCallGmap != 'undefined'){
				res += '<a class="debugGmap" id="' + item._id + '" target="_blank" href="'+item.debugCallGmap+'">';
				res += '<i class = "icon-check" title="Gmap Query Debug"></i>';
				res += '</a>';				
			}
			
			
			res += "</div>";

			res += '<a class="editPlace" id="' + item._id + '" href="#">';

			if (item.status == 1) {
				icon = 'icon-ok-sign';
				title_icon = "Validée";
			}
			else if (item.status == 3) {
				icon = 'icon-ban-circle';
				title_icon = "Désactivé";
			}
			else{
				icon = 'icon-warning-sign';
				title_icon = "Erreur de localisation";
			}

			if(item.title.length > 50) {
				title_title = "title = '" + item.title + "'";
				item.title = item.title.slice(0, 50) + "...";
			}
			var flags = '';
			if(typeof item.yakCat != 'undefined' && item.yakCat != ''){
				if( item.yakCat.inArray('5056b7aafa9a95180b000000'))
					flags = "<span class='badge badge-important'>Dico</span>";
				if( item.yakCat.inArray('507e5a9a1d22b30c44000068') )
					flags = "<span class='badge badge-warning'>Ville</span>";
			}
			
			res += '<div class="text-info" '+ title_title + '>';
			res += '<i class="' + icon + ' status" title="' + title_icon + '" ></i>';
			res += item.title + '</div>';

			res += "<small>";

			res += "<div>";
			
			if(typeof item.thumb != 'undefined' && item.thumb)
				res += "<img class='img-rounded' style='width:50px' src='"+item.thumb+"' />&nbsp;&nbsp;";
			
			if (item.formatted_address)
				res += item.formatted_address;
			
			res += "</div>";
			res += flags;
			res += "<i>";			
			if(typeof item.yakCatName != 'undefined' && item.yakCatName.length > 0)
				res += '#'+item.yakCatName.join(', #');

			if(typeof item.freeTag != 'undefined' && item.freeTag.length > 0 ) {
				res += ', #'+item.freeTag.join(', #');				
			}
			res += "</i>";
			res += item._id;
			res += '</small></a>';
			return res;
		}

		

		

		function refreshDatagridAndMenu () {
			// Temporary refresh method for datagrid
			var $gridsearch = jQuery('#MyGrid').find('.search');
			var search = $gridsearch.find('input').val();
			$gridsearch.trigger('searched', search);
			$.getJSON('/api/validplaces', function(data) {
				$('#placenumber').html('').removeClass('badge badge-important');
				if (data.info != 0)
					$('#placenumber').addClass('badge badge-important').html(data.info);
			});
			$.getJSON('/api/validinfos', function(data) {
				$('#infonumber').html('').removeClass('badge badge-important');
				if (data.info != 0)
					$('#infonumber').addClass('badge badge-important').html(data.info);
			});
			
		}




		/****************************************************************** TOP SEARCH PANEL ***************************************************************************/

		// Toggle searchPanel
		$('a.showSearchPanel').unbind('click').on('click', function() {
			$("#iconSearchPanel").toggleClass("icon-chevron-down");
			$("td.searchPanel").toggle("fast");
			return false;
		});

		/*SEARCH LOCATION INPUT*/
		$('#searchPlaceStr').val(curPos.name);
		$('#searchPlaceStr').unbind("click").on('click',function(){
				$(this).select();
		});


		// autocomplete Place
		$('#searchPlaceStr').typeahead({
			minLength : 3,							
			source: function (typeahead, query) {
				if(query.length >= 3){
					encodeURIComponent(query);
					$("#searchPlaceStr").addClass('searching');
					var addressQuery = {"address": query ,"region":"fr","language":"fr"};
					var geocoder = new google.maps.Geocoder();
					geocoder.geocode( addressQuery, function(results, status) {						
					if (status == google.maps.GeocoderStatus.OK) {
						$.map( results, function( item ) {fixGmapResult(item);});
						typeahead.process(results);
						$("#searchPlaceStr").removeClass('searching');
					} 
					});
				}
			},
			property: "formatted_address",
			onselect: function(obj) { 
				psClick = 1;
				$("#searchPlaceStr").removeClass('searching');
				var placeGmap = getPlaceFromGmapResult(obj);
				
				curPos.x = placeGmap.location.lat;
				curPos.y = placeGmap.location.lng;
				curPos.name = placeGmap.formatted_address;
				var location = JSON.stringify({lat:curPos.x,lng:curPos.y});				
				$.cookie("geoloc", JSON.stringify(curPos),{ expires: 10000, path : '/' });
				var locationObj = JSON.parse(location);
				if(location != '' && oldLocation.lat != locationObj.lat && oldLocation.lng != locationObj.lng){
					var latLng = new google.maps.LatLng(locationObj.lat,locationObj.lng);
					markerHL.setPosition(new google.maps.LatLng(locationObj.lat,locationObj.lng));
					markerHL.setVisible(true);
					markerHL.setMap(map);
					markerHL.setOptions({icon:"/images/markers/target3.png"});
					setTimeout(function() {
						markerHL.setMap(null);
					}, 3000);
					map.panTo(latLng);
					oldLocation = locationObj;
					curPos.x = locationObj.lat;
					curPos.y = locationObj.lng;
					
				}
	
			}
		});

		// Searchpanel yakcat input
		$('input#yakCat').typeahead({
			source: function (typeahead, query) {
				$.ajax({
					url: "/api/allCats",
					success: function(data) {
						typeahead.process(data.data.cats);
					}
				})
			},
			property: "title",
			onselect: function(obj) {
				$(".pillbox#yakCatFilter").show();
				$(".pillbox#yakCatFilter ul").append("<li class='yakcat-value' data-value="+obj._id+">"+obj.title+"</li>");

				$('input#yakCat').val('').focus();
				refreshDatagridAndMenu();
			}
		});

		// Searchpanel user input
		$('input#userFilter').typeahead({
			source: function (typeahead, query) {
					if (query.length > 1) {
						$.ajax({
						url: "/api/usersearch/"+query,
						success: function(data) {
							typeahead.process(data.users);
						}
					})
				}
			},
			property: "name",
			onselect: function(obj) {
				$(".pillbox#userFilter").show();
				$(".pillbox#userFilter ul").append("<li class='user-value' data-value="+obj._id+">"+obj.name+"</li>");
				$('input#userFilter').val('').focus();
				refreshDatagridAndMenu();
			}
		});

		// Searchpanel feed input
		$('input#feedFilter').typeahead({
			source: function (typeahead, query) {
					if (query.length > 1) {
						$.ajax({
						url: "/api/feedList/",
						success: function(data) {
							typeahead.process(data.feeds);
						}
					})
				}
			},
			property: "name",
			onselect: function(obj) {
				$(".pillbox#feedFilter").show();
				$(".pillbox#feedFilter ul").append("<li class='user-value' data-value="+obj._id+">"+obj.name+"</li>");
				$('input#feedFilter').val('').focus();
				refreshDatagridAndMenu();
			}
		});


		// Refresh on sort selection
		$('#sortPlaces').live('change', function() {
			refreshDatagridAndMenu();
		});
		// Refresh on sort selection
		$('#filterStatus').live('change', function() {
			var currentSelection = $('#filterStatus :selected').val();
			$.cookie("statusPlace",currentSelection,{ expires: 100000, path : '/' });
			if (currentSelection == 1) {
				$('.validerPlaces').addClass('disabled');
				$('.supprimerPlaces').removeClass('disabled');
				$('.enattentePlaces').removeClass('disabled');
			}
			else if (currentSelection == 3) {
				$('.validerPlaces').removeClass('disabled');
				$('.enattentePlaces').removeClass('disabled');
				$('.supprimerPlaces').addClass('disabled');
			}
			else if (currentSelection == 2) {
				$('.validerPlaces').removeClass('disabled');
				$('.enattentePlaces').addClass('disabled');
				$('.supprimerPlaces').removeClass('disabled');
			}
			else {
				$('.validerPlaces').removeClass('disabled');
				$('.enattentePlaces').removeClass('disabled');
				$('.supprimerPlaces').removeClass('disabled');
			}

			refreshDatagridAndMenu();
		});

		//Autocomplete on title (search input)
		$('input#search').typeahead({
			source: function (typeahead, query) {
				var status = $('#filterStatus :selected').val();
				if (query.length > 1) {
					$.ajax({
						url: "/api/places/search/"+query+'/'+status,
						success: function(data) {
							typeahead.process(data.places);
						}
					})
				}
			},
			property: "title"
		});

		$("#validation").change(function() {
			$.getJSON('/api/places/'+ $(this).val(),function(data) {
				$('div#placeContent').html("");
				renderData(data);
			});
		});

		// Datagrid checkbox
		$(".selectYakPlace").live('change', function() {
			if ($(this).prop('checked') == false)
				$("#selectAllPlaces").prop('checked', false);
		});

		$("#selectAllPlaces").change(function() {
			$(".selectYakPlace").prop('checked', $(this).prop('checked'));
		});

		$(".validerPlaces").live('click', function() {
			if ($(".validerPlaces").hasClass("disabled")) return;
			var vals = [];
			var i = 0;

			$(".selectYakPlace").each(function(){
				if ($(this).prop('checked') == true)
					vals[i++] = jQuery(this).val();
			});

			if (vals.length == 0) {
				// alert('Aucune place selectionnee.');
				return;
			}

			var url = '/api/places/validate/'+vals.toString();

			$.get(url, function(data) {
				if (data.result == -1)
					alert('Erreur lors de la validation');
				else {
					toastr.info('Validation de ' + data.result + ' lieu(x)');
					refreshDatagridAndMenu();
				}
			});

			return vals;
		});

		$(".supprimerPlaces").unbind('click').on('click', function() {
			if ($(".supprimerPlaces").hasClass("disabled")) return;
			var vals = [];
			var i = 0;

			$(".selectYakPlace").each(function(){
				if ($(this).prop('checked') == true)
					vals[i++] = jQuery(this).val();
			});

			if (vals.length == 0) {
				// alert('Aucune place selectionnee.');
				return;
			}

			var url = '/api/places/delete/'+vals.toString();

			$.get(url, function(data) {
				if (data.result == -1 || typeof data.result == 'undefined')
					toastr.error('Erreur de désactivage');
				else {
					toastr.info('Désactivage de ' + data.result + ' lieu(x)');
					refreshDatagridAndMenu();
				}
			});

			return vals;
		});

		$(".enattentePlaces").live('click', function() {
			if ($(".enattentePlaces").hasClass("disabled")) return;
			var vals = [];
			var i = 0;

			$(".selectYakPlace").each(function(){
				if ($(this).prop('checked') == true)
					vals[i++] = jQuery(this).val();
			});

			if (vals.length == 0) {
				// alert('Aucune place selectionnee.');
				return;
			}

			var url = '/api/places/wait/'+vals.toString();

			$.get(url, function(data) {
				if (data.result == -1)
					alert('Erreur lors de la suppression');
				else {
					// alert('Suppression de ' + data.result + ' place(s)');
					toastr.info('Mise en attente de ' + data.result + ' lieu(x)');
					refreshDatagridAndMenu();
				}
			});

			return vals;
		});


		
		// Remove pillbox if empty, refresh datagrid everytime an object is removed
		$("li.yakcat-value").live('click', function() {
			if ($(".pillbox#yakCatFilter").pillbox("items").length == 0) {
				$(".pillbox#yakCatFilter").hide();
			}
			refreshDatagridAndMenu();
		});

		$("li.user-value").live('click', function() {
			if ($(".pillbox#userFilter").pillbox("items").length == 0) {
				$(".pillbox#userFilter").hide();
			}
			refreshDatagridAndMenu();
		});

		// Datagrid checkbox
		$('#filterStatus , #filterType , #limit10days').unbind('click').live('change', function() {
			refreshDatagridAndMenu();
		});


		/****************************************************************** ADD / EDIT / DUPLICATE A PLACE ***************************************************************************/
		// Edit Place function
		/*bind form edition on the loaded datagrid event to avoid double loading*/
		$('#MyGrid').unbind('loaded').on('loaded',function(){
		
			$("#MyGrid .editPlace").unbind('click').on('click', function(){
				event.preventDefault();
				event.stopPropagation();
				editPlace(this.id,0);
			});		
				
			$('#MyGrid a.centerMap').live('click', function() {
				event.preventDefault();
				event.stopPropagation();
				var latlng = new google.maps.LatLng($(this).attr('lat'), $(this).attr('lng'));
				getformattedAddress(latlng);
				placeMarker(latlng,markerLocation);
				map.panTo(markerLocation.getPosition());
				
			});	

			$("#MyGrid a.duplicateItem").on('click', function(event){
				event.preventDefault();
				event.stopPropagation();
				editPlace(this.id,1);
			});


		});


		function editPlace(id,flagDuplicate){
			listenerHandle = google.maps.event.addListener(map, 'click', function(event) {
				getformattedAddress(event.latLng);
				placeMarker(event.latLng,markerLocation);
				reduceZoneOptions(event.latLng.lat(),event.latLng.lng());
			});
			listenerHandleDrag = google.maps.event.addListener(markerLocation, 'dragend', function() {
				var position = markerLocation.getPosition();
				getformattedAddress(position);
				reduceZoneOptions(position.lat(),position.lng());
			});
			$("#MyGrid").hide();
			// We remove the error class when we open a form for editing a place
			$('#placeForm #titleGroup').removeClass("error");
			$('#placeForm #contentGroup').removeClass("error");
			$('#placeForm #licenceGroup').removeClass("error");
			$('#placeForm #origineGroup').removeClass("error");
			$('#placeForm #adresseGroup').removeClass("error");
			$("#btnBack").fadeIn();
			$("#placeForm").fadeIn();
			$(".catLabel").remove();
			$("#pillYakcat ul").empty();
			$('#err').hide();
			yakcatArray = new Array();
			yakcatNames = new Array();

			$("#placeForm legend.mainlegend").html("Editer un lieu");
			

			var url = '/api/places/'+id;
				// We search for the place in mongo and we fill the form with the place's values
				$.ajax({
					url: url,
					type: 'GET',
					async: false,
					success: function (response){
						var place = response.place;
						if(flagDuplicate == 1){
							$("#placeForm legend.mainlegend").html("Dupliquer un lieu");
							$("#placeForm #title").val(place.title+'_copy').focus();
							$("#placeForm #objid").val('');
							$("#placeForm #thumbHidden").val(place.thumbName);
							$("#placeForm #status").val(1); // if duplication : we validate by default
						}else{	
							$("#placeForm legend.mainlegend").html("Modifier un lieu");
							$("#placeForm #objid").val(id);
							$("#placeForm #title").val(place.title).focus();
							$("#placeForm #status").val(place.status); // if no duplication : we set the edit status as it should be
						}


						if(typeof place.location != 'undefined' && place.location.lat && place.location.lng){
							var latlng = new google.maps.LatLng(place.location.lat, place.location.lng);
							getformattedAddress(latlng);
							placeMarker(latlng,markerLocation);
							map.setCenter(markerLocation.getPosition());							
						}
						
						
						$("#placeForm #licence").val(place.licence);
						$("#placeForm #origine").val(place.origin);
						$("#placeForm #hiddenOrigin").val(place.origin);
						$("#placeForm #origine").prop('disabled', true);

						$("#placeForm #outgoinglink").val(place.outGoingLink);
						
						$("#placeForm #content").val(place.content);
						
						if(typeof place.zone)
							$("#placeForm #zone").val(place.zone);
						
						if(typeof place.zoneName)
							$("#placeForm #zoneName").val(place.zoneName);


						

						if(typeof place.yakCat != 'undefined' &&  place.yakCat.length > 0){
							place.yakCat.forEach(function(cat){
								if(cat != ""){
									$.get('/api/cats/'+cat,function(data){
										if(data.cats.status == 1){
											$("#pillYakcat ul").append("<li class='yakcat-val status-important' data-id='"+data.cats._id+"'>"+data.cats.title+"</li>");
											yakCatIds.push(data.cats._id);
											yakCatNames.push(data.cats.title);
											if(yakCatIds.length > 0 && typeof yakCatIds != 'undefined')	
												$("#yakCatIdsHidden").val(yakCatIds.join(','));	
												$("#yakCatNamesHidden").val(yakCatNames.join(','));	
										}else{ // for system cats : DICO VILLE and YAKDICO
											if(data.cats._id == "507e5a9a1d22b30c44000068"){
												$("#yakCatVille").attr('checked', true);
											}
											
											if(data.cats._id == "5056b7aafa9a95180b000000")
												$("#yakCatYakdico").attr('checked', true);
											
										}
										
									});
								}
							});	
						}

						$('input:radio[name=status][value='+place.status+']').click();
						$("#placeForm #title").focus();
						
						// loading the thumb
						var imag = "<img class='img-rounded' " + "src=\'"+place.thumb +"\' style='width:100px'/>";
						$("#placeForm #picturePreview").html(imag);
						if(typeof place.freeTag != 'undefined'){
							freeTags = place.freeTag;
							$("#placeForm #tagsHidden").val(place.freeTag.join(","));
							place.freeTag.forEach(function(tag){
								if(tag.trim().length > 0)
									$("#pillFreetag ul").append("<li class='freetag-val' data-value='"+tag+"'>"+tag+"</li>");
							});
						}
							

						if (typeof place.contact != 'undefined'){
							$("#placeForm #tel").val(place.contact.tel);
							$("#placeForm #mobile").val(place.contact.mobile);
							$("#placeForm #mail").val(place.contact.mail);
							$("#placeForm #transportation").val(place.contact.transportation);
							$("#placeForm #web").val(place.contact.web);
							$("#placeForm #opening").val(place.contact.opening);
							$("#placeForm #closing").val(place.contact.closing);
							$("#placeForm #special").val(place.contact.special_opening);
						}
					}
				});
		

		}

		// Add Place function
		$("#btnAdd").unbind('click').on('click',function(){

			var user = !{JSON.stringify(user)};
			//console.log(user);
			event.preventDefault();
			listenerHandle = google.maps.event.addListener(map, 'click', function(event) {
				getformattedAddress(event.latLng);
				placeMarker(event.latLng,markerLocation);
				reduceZoneOptions(event.latLng.lat(),event.latLng.lng());
			});
			listenerHandleDrag = google.maps.event.addListener(markerLocation, 'dragend', function() {
				var position = markerLocation.getPosition();
				getformattedAddress(position);
				reduceZoneOptions(position.lat(),position.lng());
			});

			$("#MyGrid").hide();
			$("#btnBack").fadeIn();
			$("#placeForm").fadeIn();
			$('#err').hide();
			
			$("#placeForm input[type=hidden]").val('');
			$('#placeForm').clearForm();
			$("#placeForm")[0].reset();
			$("#placeForm #objid").val("");

			$("#placeForm #status").val(1);

			$("#placeForm legend.mainlegend").html("Ajouter un lieu");
		
			// We remove the error class when we open a form for creating a new place
			$('#placeForm #titleGroup').removeClass("error");
			$('#placeForm #contentGroup').removeClass("error");
			$('#placeForm #licenceGroup').removeClass("error");
			$('#placeForm #origineGroup').removeClass("error");
			$('#placeForm #adresseGroup').removeClass("error");
		
			$("#pillYakcat ul").show();
			$("#pillFreetag ul").show();	
			$("#pillYakcat ul").html('');
			$("#pillFreetag ul").html('');
			$("#placePreview").html('');
			$("#placeForm #title").focus();
			$("#placeForm #hiddenOrigin").val(user.login);
			$("#placeForm #origine").val(user.login);
			$("#placeForm #origine").prop('disabled', true);
			yakCatIds = new Array();
			yakCatNames = new Array();
			freeTags = new Array();

		});


		// Function to go back from adding/editing form to the grid
		$("#btnBack").unbind('click').on('click',function() {
			
			$("#MyGrid").fadeIn();
			$("#placeForm").hide();
			$("#btnBack").hide();
			$('#err').hide();
			
			$("#placeForm input[type=hidden]").val('');
			$('#placeForm').clearForm();
			$("#placeForm")[0].reset();
			$("#placeForm #objid").val("");

			google.maps.event.removeListener(listenerHandle);
			markerLocation.setVisible(false);

			$("#pillYakcat ul").html('');
			$("#pillFreetag ul").html('');

			yakCatIds = new Array();
			yakCatNames = new Array();
			freeTags = new Array();

		});

		


		
		

		


		