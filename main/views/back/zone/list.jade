mixin list()
	table#MyGrid.table.table-bordered.datagrid
		thead
			tr.headerControle
				th
					.datagrid-header-left
						.input-append.search
							input#search.input-medium(type='text', placeholder='Recherche', data-provide="typeahead", autocomplete="off")
							button.btn
								i.icon-search
					.datagrid-header-right
						button.btn#btnAdd
							i.icon-plus
							span Ajouter
			tr.headerControle
				td(colspan=6)
					select#filterStatus
						option(value="2") En attente
						option(value="1") Validés
						option(value="3") Blacklistées
						option(value="4", "selected"="selected") Toutes les zones
					
		tfoot
			tr
				th
					.datagrid-footer-left(style='display: none;')
						.grid-controls
							span
								span.grid-start
								| -
								span.grid-end
								| de
								span.grid-count
							select.grid-pagesize
								option 10
								option 20
								option 50
								option 100
							span Par Page
					.datagrid-footer-right(style='display: none;')
						.grid-pager
							button.btn.grid-prevpage
								i.icon-chevron-left
							span Page
							.input-append.dropdown.combobox.dropup
								input.span1(type='text')
								button.btn(data-toggle='dropdown')
									i.caret
								ul.dropdown-menu
							span
								| de
								span.grid-pages
							button.btn.grid-nextpage
								i.icon-chevron-right


	script

		var firstLoad = true;

		var ApiDataSource = function (options) {
			this._formatter = options.formatter;
			this._columns = options.columns;
		};

		ApiDataSource.prototype = {
			columns: function () {
				return this._columns;
			},
			data: function (options, callback) {
				var url = '/api/zones';
				var self = this;

				if (!options.search) {
					options.search = "^";
				}

				url += '/' + (options.pageIndex + 1);
				url += '/' + options.pageSize;
				url += '/' + options.search;

				var sortPropertyArray = [];
				var sortDirectionArray = [];

				// Add currently selected datagrid column to sort properties
				if (options.sortProperty) {
					sortPropertyArray.push(options.sortProperty);
					sortDirectionArray.push(options.sortDirection);
				}

				// sort by name by default
				if(sortPropertyArray.length == 0)
					sortPropertyArray.push( "name");
				// Always newest first
				sortDirectionArray.push("asc");

				// Would be easier if we could pass dictionaries, needs testing
				url += '/' + sortPropertyArray.join() + '/' + sortDirectionArray.join();

				// Filter by status
				var status = $('#filterStatus :selected').val();
				url += '/' + status;

				// Optional filters: Yakcats, Users
				//  - Passed as query to allow for null
				var queryChar = '?';

				$.ajax(url, {
					type: 'GET'
				}).done(function (response) {

					if (firstLoad) {
						$("#search").focus();
						$('th[data-property="creationDate"]').addClass('sorted');
						$('th[data-property="creationDate"]').append('<i class="icon-chevron-down"></i>');
						firstLoad = false;
					}

					// Prepare data to return to Datagrid
					var data = response.zone;
					var count = response.count;
					var startIndex = (response.pageIndex - 1) * response.pageSize;
					var endIndex = parseInt(startIndex) + parseInt(response.pageSize);
					var end = (endIndex > count) ? count : endIndex;
					var page = parseInt(response.pageIndex);
					var pages = Math.ceil(response.count / response.pageSize);
					var start = startIndex + 1;

					if (self._formatter) self._formatter(data);

					callback({ data: data, start: start, end: end, count: count, pages: pages, page: page });

				});
			}
		};

		$('#MyGrid').datagrid({
			dataSource: new ApiDataSource({
				columns: [
				{
					property: 'name',
					label: 'Nom',
					sortable: true
				},
				{
					property: 'num',
					label: 'Numéro',
					sortable: true
				},
				{
					property: 'status',
					label: 'Status',
					sortable: true
				},
				{
					property: 'creationDate',
					label: 'Création',
					sortable: true
				}],
				formatter: function (items) {
					$.each(items, function (index, item) {
						item.name = fillContent(item);
						item.num= item.num;
						item.status = makeStatusDropDown(item);
						item.creationDate = formatDate(item.creationDate);
					});
				}
			})
		});

		
		
		function setNewStatus(el)
		{
			var _id = $(el).attr("rel");
			$(el).after("<span class='updateStatus'>loading...</span>");
			$(el).attr("disabled", "disabled");
			$.post("/zone/setStatus", {status: $(el).val(), _id : $(el).attr("rel")}, function(data){
					if(data.meta.code == "200")
					{
						$(el).removeAttr("disabled");
						$(el).parent().find(".updateStatus").remove();
					}
				});
		}

		
		function makeStatusDropDown(item){
			var select = $("<div />");
			select.attr("class", "selectStatus");
			select.html('<select onchange="setNewStatus(this)" class="selectStatus" rel="'+item._id+'"><option value="2">En attente</option><option value="1">Validée</option><option value="3">Blacklistée</option></select>');
			select.find("option").each(function(){
				if($(this).attr("value") == item.status)
					$(this).attr("selected", "selected");
			});
			return select.html();
		}

		
		function fillContent(item) {
			var res = "";
			var icon = "icon-time";
			var title_icon = "En attente";
			var title_title = "";

			res += '<div class="liens">';
			res += '<a href="#" id="'+item._id+'" class="duplicateItem listIcon" title="Dupliquer"><i class="icon-random"></i></a>';
			res += '<a class="centerMap" id="' + item._id + '" href="/place/list/#">';

			if (typeof item.location != 'undefined'
				&& typeof item.location.lat != 'undefined'
				&& typeof item.location.lng != 'undefined' ){
				res += '<a class="centerMap listIcon" id="' + item._id + '" lat="' + item.location.lat + '" lng="' + item.location.lng + '"   href="#">';
			res += '<i class = "icon-map-marker" title="Localiser"></i>';
			res += '</a>';
			}	
			res += "</div>";

			res += '<a class="editZone" id="' + item._id + '" href="#">';

			if (item.status == 1) {
				icon = 'icon-ok-sign';
				title_icon = "Validée";
			}
			else if (item.status == 3) {
				icon = 'icon-ban-circle';
				title_icon = "Blacklistée";
			}
			
			if(item.name.length > 50) {
				item.name = item.name.slice(0, 50) + "...";
			}

			res += '<div class="text-info" ><i class="' + icon + ' status" title="' + title_icon + '" ></i>' + item.name +'</div>';

			
			res += '</a>';
			return res;
		}

		
		function formatDate(creationDate) {
			var dateTmp = new Date(creationDate);
			return dateTmp.getDate()+'/'+(dateTmp.getMonth()+1)+'/'+dateTmp.getFullYear();

		}

		
		/*bind form edition on the loaded datagrid event to avoid double loading*/
		$('#MyGrid').unbind('loaded').on('loaded',function(){
				// Edit Feed function
			$("#MyGrid .editZone").one('click', function(event){
				event.preventDefault();
				event.stopPropagation();
				editZone(this.id,0);
				
			});

			$("#MyGrid a.centerMap").one('click', function(event){
				event.preventDefault();
				event.stopPropagation();
				var latlng = new google.maps.LatLng($(this).attr('lat'), $(this).attr('lng'));
				getformattedAddress(latlng);
				placeMarker(latlng,markerLocation);
				map.panTo(markerLocation.getPosition());
			});	
			
			$("#MyGrid a.duplicateItem").one('click', function(event){
				event.preventDefault();
				event.stopPropagation();
				editZone(this.id,1);
			});
		});
		


		// Refresh on sort selection
		$('#sortZones').live('change', function() {
			refreshDatagridAndMenu();
		});
		// Refresh on sort selection
		$('#filterStatus').live('change', function() {
			var currentSelection = $('#filterStatus :selected').val();
			if (currentSelection == 1) {
				$('.validerPlaces').addClass('disabled');
				$('.supprimerPlaces').removeClass('disabled');
				$('.enattentePlaces').removeClass('disabled');
			}
			else if (currentSelection == 3) {
				$('.validerPlaces').removeClass('disabled');
				$('.enattentePlaces').removeClass('disabled');
				$('.supprimerPlaces').addClass('disabled');
			}
			else if (currentSelection == 2) {
				$('.validerPlaces').removeClass('disabled');
				$('.enattentePlaces').addClass('disabled');
				$('.supprimerPlaces').removeClass('disabled');
			}
			else {
				$('.validerPlaces').removeClass('disabled');
				$('.enattentePlaces').removeClass('disabled');
				$('.supprimerPlaces').removeClass('disabled');
			}

			refreshDatagridAndMenu();
		});




		function refreshDatagridAndMenu () {
			// Temporary refresh method for datagrid
			var $gridsearch = jQuery('#MyGrid').find('.search');
			var search = $gridsearch.find('input').val();
			$gridsearch.trigger('searched', search);
		}

		
		// Add ZOne function
		$("#btnAdd").click(function(event){
			var user = !{JSON.stringify(user)};
			event.preventDefault();
			listenerHandle = google.maps.event.addListener(map, 'click', function(event) {
				getformattedAddress(event.latLng);
				placeMarker(event.latLng,markerLocation);
			});
			listenerHandleDrag = google.maps.event.addListener(markerLocation, 'dragend', function() {
				var position = markerLocation.getPosition();
				$('#placeForm #latitude').val(position.lat());
				$('#placeForm #longitude').val(position.lng());

				getformattedAddress(position);
			});

			$("#MyGrid").hide();
			$("#placeForm")[0].reset();
			// We remove the error class when we open a form for creating a new place
			$('#placeForm #titleGroup').removeClass("error");
			$('#placeForm #contentGroup').removeClass("error");
			$('#placeForm #licenceGroup').removeClass("error");
			$('#placeForm #origineGroup').removeClass("error");
			$('#placeForm #adresseGroup').removeClass("error");
			$('#placeForm #content').val("");
			$('#placeLabel').first().remove();
			$("#btnBack").fadeIn();
			$("#placeForm").fadeIn();
			$("#placeForm legend").html("Ajouter un lieu");
			$("#placeForm #objid").val("");
			$(".catLabel").remove();
			$("#pillYakcat ul").empty();
			$('#err').hide();
			$("#placeForm #title").focus();
			$("#placeForm #hiddenOrigin").val(user.login);
			$("#placeForm #origine").val(user.login);
			$("#placeForm #origine").prop('disabled', true);
			yakcatArray = new Array();
			yakcatNames = new Array();
		});


		// Function to go back from adding/editing form to the grid
		$("#btnBack").click(function() {
			$("#MyGrid").fadeIn();
			$("#placeForm").hide();
			$("#btnBack").hide();
			google.maps.event.removeListener(listenerHandle);
			markerLocation.setVisible(false);
		});

		




		function editZone(id,flagDuplicate){
			event.preventDefault();

			listenerHandle = google.maps.event.addListener(map, 'click', function(event) {
				getformattedAddress(event.latLng);
				placeMarker(event.latLng,markerLocation);
			});
			listenerHandleDrag = google.maps.event.addListener(markerLocation, 'dragend', function() {
				var position = markerLocation.getPosition();
				$('#placeForm #latitude').val(position.lat());
				$('#placeForm #longitude').val(position.lng());

				getformattedAddress(position);
			});


			$("#MyGrid").hide();
			// We remove the error class when we open a form for editing a place
			$('#placeForm #titleGroup').removeClass("error");
			$('#placeForm #contentGroup').removeClass("error");
			$('#placeForm #licenceGroup').removeClass("error");
			$('#placeForm #origineGroup').removeClass("error");
			$('#placeForm #adresseGroup').removeClass("error");
			$("#btnBack").fadeIn();
			$("#placeForm").fadeIn();
			$(".catLabel").remove();
			$("#pillYakcat ul").empty();
			$('#err').hide();
			yakcatArray = new Array();
			yakcatNames = new Array();

			$("#placeForm legend").html("Editer un lieu");
			$("#placeForm #objid").val(this.id);

			var url = '/api/places/'+this.id;

			// We search for the place in mongo and we fill the form with the place's values
			$.ajax({
				url: url,
				type: 'GET',
				async: false,
				success: function (response)
				{
					var place = response.place;

					var latlng = new google.maps.LatLng(place.location.lat, place.location.lng);
					getformattedAddress(latlng);
					placeMarker(latlng,markerLocation);
					map.setCenter(markerLocation.getPosition());
					$("#placeForm #licence").val(place.licence);
					$("#placeForm #origine").val(place.origin);
					$("#placeForm #hiddenOrigin").val(place.origin);
					$("#placeForm #origine").prop('disabled', true);
					$("#placeForm #outgoinglink").val(place.outGoingLink);
					$("#placeForm #title").val(place.title);
					$("#placeForm #content").val(place.content);
					$("#placeForm #freetag").val(place.freeTag);

					for (var i = 0; i < place.yakCat.length; i++)
					{
						var url = '/api/cats/'+place.yakCat[i];
						$.ajax({
							url: url,
							type: 'GET',
							async: false,
							success: function (response)
							{
								var yakcat = response.cat;
								$("#pillYakcat").show();
								$("#pillYakcat ul").append("<li class='yakcat-val' data-value="+yakcat._id+">"+yakcat.title+"</li>");
								$('#placeForm #yakcat').val('').focus();
							}
						});
					}

					$('input:radio[name=status][value='+place.status+']').click();
					$("#placeForm #title").focus();
					$("#placeForm #place").val('');

					// loading the thumb
					var imag = "<img class='img-rounded' " + "src=\'/uploads/pictures/512_0/" + place.thumb +"\' style='width:100px'/>";
					$("#placeForm #picturePreview").html(imag);

					$("#placeForm #freetag").val(place.freeTag.join(","));

					if (place.contact)
					{
						$("#placeForm #tel").val(place.contact.tel);
						$("#placeForm #mobile").val(place.contact.mobile);
						$("#placeForm #mail").val(place.contact.mail);
						$("#placeForm #transportation").val(place.contact.transportation);
						$("#placeForm #web").val(place.contact.web);
						$("#placeForm #opening").val(place.contact.opening);
						$("#placeForm #closing").val(place.contact.closing);
						$("#placeForm #special").val(place.contact.special_opening);
					}
				}
			});

		}