extends ../layout

block content

	include ../mixins/docsMenu.jade
	include ../mixins/docsSubMenu.jade
	
	mixin docsMenu('api')
	

	div.container-fluid
		div.row-fluid
			div.span2
			div.span2.yak-sidebar
				mixin docsSubMenu('presentation')

						
			div.span6
				div.row-fluid
					div.content-header
						div.header-inner
							h2 Documentation de l'api
							p.subheader 
				hr
				div.row-fluid
					h3#authentification Authentification
					p.subheader Yakwala's API uses the OAuth 2.0 protocol for simple, but effective authentication and authorization.
					h4#auth_1 Do you need to authenticate?
					p For the most part, Yakwala's API only requires the use of a client_id. A client_id simply associates your server, script, or program with a specific application. However, some requests require authentication - specifically requests made on behalf of a user. 
					p Authenticated requests require an access_token.  These tokens are unique to a user and should be stored securely. Access tokens may expire at any time in the future.
					p To authenticate, you need a validated user account that you can create from the front end or from the api ( see this <a class='insideLink' href="#endpoint_user">section</a>)
					

					br
					h4#auth_2 Receiving an access_token
					p In order to receive an access_token, you must do the following:
						ol
							li Direct the user to our authorization url.
								ul
									li If the user is not logged in, they will be asked to log in.
									li The user will be asked if they’d like to give your application access to his/her Yakwala data.
							li The server will redirect the user in one of two ways that you choose:
								ul
									li 
										b Server-side flow (more secured): 
										span Redirect the user to a URI of your choice. Take the provided code parameter and exchange it for an access_token by POSTing the code to our access_token url.
									li 
										b Implicit flow: 
										span Instead of handling a code, we include the access_token as a fragment (#) in the URL. This method allows applications without any server component to receive an access_token with ease.

					h4#auth_3 Server-side (Explicit) Flow
					p Using the server-side flow is quite easy. Simply follow these steps:
					h5 
						b Step One: 
						span Direct your user to our authorization URL
					p
						pre #{JSON.parse(locals.conf).apiurl}/api/oauth/authorize?client_id=YOUR_CLIENT_ID&response_type=code&redirect_uri=YOUR_REDIRECT_URI
						p At this point, we present the user with a login screen and then a confirmation screen where they approve your app’s access to his/her Yakwala data.

					h5
						b Step Two: 
						span Receive the redirect from Yakwala
					p	
						Once a user successfully authenticates and authorizes your application, we will redirect the user to your redirect_uri with a code parameter that you’ll use in step three.
						code http://YOUR_REDIRECT_URI?code=CODE
					p
						b Note that your redirect URI's host and path MUST match exactly (including trailing slashes) to your registered redirect_uri. You may also include additional query parameters in the supplied redirect_uri, if you need to vary your behavior dynamically.
					
					h5 
						b Step Three: 
						Request the access_token

					p
						In the previous step, you’ll have received a code which you’ll have to exchange in order to receive an access_token for the user. In order to make this exchange, you simply have to POST this code, along with some app identification parameters to our access_token endpoint. Here are the required parameters:
					pre		
						ul
							li client_id: your client id
							li client_secret: your client secret
							li grant_type: authorization_code is currently the only supported value
							li redirect_uri: the redirect_uri you used in the authorization request. Note: this has to be the same value as in the authorization request.
							li code: the exact code you received during the authorization step.
					
					p For example, you could request an access_token like so:
					
					pre
						div curl \-F 'client_id=CLIENT-ID' \
						div -F 'client_secret=YOUR_CLIENT_SECRET' \
						div -F 'grant_type=YOUR_AUTH_CODE' \
						div -F 'redirect_uri=YOUR_REDIRECT_URI' \
						div -F 'code=CODE' \http://#{JSON.parse(locals.conf).apidns}/api/oauth/access_token
					
					p If successful, this call will return a neatly packaged OAuth Token that you can use to make authenticated calls to the API. We also include the user who just authenticated for your convenience:
					pre
						div {
						div &nbsp;&nbsp;"access_token": "xxx",
						div &nbsp;&nbsp;"user": {
						div &nbsp;&nbsp;&nbsp;&nbsp;"id": "xxx",
						div &nbsp;&nbsp;&nbsp;&nbsp;"username": "xxx",
						div &nbsp;&nbsp;&nbsp;&nbsp;"full_name": "xxx",
						div &nbsp;&nbsp;&nbsp;&nbsp;"profile_picture": "xxx"
						div &nbsp;&nbsp;}
						div }
					p Note that we do not include an expiry time. Our access_tokens have no explicit expiry, though your app should handle the case that either the user revokes access or we expire the token after some period of time. 
		
					h4#auth_4 Client-Side (Implicit) Authentication
					p If you’re building an app that does not have a server component (a purely javascript app, for instance), you’ll notice that it’s impossible to complete step three above to receive your access_token without also having to ship your client secret. You should never ship your client secret onto devices you don’t control. Then how do you get an access_token? Well the smart folks in charge of the OAuth 2.0 spec anticipated this problem and created the Implicit Authentication Flow.

					h5
						b Step One: 
						span Direct your user to our authorization URL

					pre #{JSON.parse(locals.conf).apiurl}/api/oauth/authorize?client_id=YOUR_CLIENT_ID&response_type=token&redirect_uri=YOUR_REDIRECT_URI
					p At this point, we present the user with a login screen and then a confirmation screen where they approve your app’s access to their Yakwala data. Note that unlike the explicit flow the response type here is “token”.

					h5
						b Step Two: 
						span Receive the access_token via the URL fragment
					p	
						Once the user has authenticated and then authorized your application, we’ll redirect them to your redirect_uri with the access_token in the url fragment. It’ll look like so:

					pre http://your-redirect-uri#access_token=ACCESS-TOKEN
					p Simply grab the access_token off the URL fragment and you’re good to go. If the user chooses not to authorize your application, you’ll receive the same error response as in the explicit flow

					h4#auth_5 How to get a client id and secret ?
					p For the moment, ask our developement team by sending a request at this email : info at yakwala  dot fr, explaining what you will do, your redirect url and we will provide you with a client id and secret.
					
					hr
					
					h3#formats Formats
					p How data is formatted
					h4#format_images Images
					p All images uploaded are available with the following urls depending on the size you need : 
					ul
						li 
							div user's profile image:
							div
								code #{JSON.parse(locals.conf).fronturl}/pictures/128_128/856433cd5588bc6914fc9c64a91aabcb.jpeg
							div
								code #{JSON.parse(locals.conf).fronturl}/pictures/48_48/856433cd5588bc6914fc9c64a91aabcb.jpeg
							div
								code #{JSON.parse(locals.conf).fronturl}/pictures/24_24/856433cd5588bc6914fc9c64a91aabcb.jpeg
						li 
							div place's thumb:
							div
								code #{JSON.parse(locals.conf).fronturl}/pictures/512_0/856433cd5588bc6914fc9c64a91aabcb.jpeg
							div
								code #{JSON.parse(locals.conf).fronturl}/pictures/120_90/856433cd5588bc6914fc9c64a91aabcb.jpeg
						li 
							div news' thumb:
							div
								code #{JSON.parse(locals.conf).fronturl}/pictures/512_0/856433cd5588bc6914fc9c64a91aabcb.jpeg
							div
								code #{JSON.parse(locals.conf).fronturl}/pictures/120_90/856433cd5588bc6914fc9c64a91aabcb.jpeg
					
					h4#format_parameters Parameters
					p Paramaters are defined below for each endpoint.
					p All params are typed as much as possible : an id must be passed with an array(_id=>'xxxx')
					h4#format_response Responses
					p Responses are following the schemas below:
						pre
							div { "meta": { "code": 200, "data": { [{DATA}] } } }
						div Or fi an error occurred:
						pre
							div { "meta": { "code": 404, error_type:'xxx',error_description:'xxx'}};	
						br	
						p the data is an array of objects following the templates below :
						br
						div#format_info
							pre
								div <b>info</b> : {
								div &nbsp;&nbsp;<b>_id</b> : string, 
									i.muted news id
								div &nbsp;&nbsp; <b>title</b> : string, 
									i.muted news title
								div &nbsp;&nbsp; <b>placeid</b> : string, 
									i.muted each news is linked to a place id ( see the /api/place to create a place)
								div &nbsp;&nbsp; <b>location</b> : array(lat,lng): {lat:float,lng:float}, 
									i.muted the geographical location of the news
								div &nbsp;&nbsp; <b>content</b> : string, 
									i.muted news main content 
								div &nbsp;&nbsp; <b>thumb</b> : string,  
									i.muted news thumb
								div &nbsp;&nbsp; <b>print</b> : boolean, 
									div
										i.muted &nbsp;&nbsp;&nbsp;&nbsp; 0 => the news appears only on the news feed and not on the map
									div 
										i.muted &nbsp;&nbsp;&nbsp;&nbsp;1 => the news appears on the news feed and on the map
								div &nbsp;&nbsp; <b>address</b> : string, 
									i.muted the human redable address string
								div &nbsp;&nbsp; <b>pubdate</b> : date, 
									i.muted date to be published, Unix timestamp 
								div &nbsp;&nbsp; <b>dateEndPrint</b> : date, 
									i.muted date of the end of the news,
									div
										i.muted &nbsp;&nbsp;&nbsp;&nbsp; every item has a limited lifetime begining at pubDate and ending at dateEndPrint
								div &nbsp;&nbsp; <b>creationDate</b> : date, 
									i.muted creation date
								div &nbsp;&nbsp; <b>lastModifDate</b> : date, 
									i.muted last modif date
								div &nbsp;&nbsp; <b>yaktype</b> : int, 
									i.muted &nbsp;&nbsp;&nbsp;&nbsp; Yakwala type
									i.muted 
										div &nbsp;&nbsp;&nbsp;&nbsp; Values allowed are :
											ul
												li for a normal user : Discussion = 4
												li for a premium media user : Actu = 1 , Agenda = 2 , Info Pratique = 3 , Discussion = 4
												li for any other premium account : Agenda = 2 , Info Pratique = 3 , Discussion = 4
								div &nbsp;&nbsp;<b>freetag</b> : [string,string], 
									i.muted array of string tags 
								div &nbsp;&nbsp;<b>yakCatName</b> : ['Sports','Football'], 
									i.muted array of Yakwala categories names
								div &nbsp;&nbsp;<b>yakCat</b> : ['id1xxxx','id2xxxx'], 
									i.muted array of Yakwala categories
								}

						div#format_lightPlace
							br
							br 
							br
							pre
								div <b>lightPlace</b> : {
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>_id</b> : string, 
									i.muted place id
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>title</b> : string, 
									i.muted place name
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>location</b> : { lng : float, lat : float },
									i.muted place latitude and longitude
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>range</b> : int, 
									i.muted search range // related to user

						div#format_place
							br
							br
							br
							pre
								div <b>place</b> : {
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>_id</b> : string, 
									i.muted place id
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>title</b> : string,
									i.muted place name
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>content</b> : string,
									i.muted place description
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>thumb</b> : string,
									i.muted place thumbnail url
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>outGoingLink</b> : string,
									i.muted link to a resource describing the place
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>yakCat</b> : [string] 
									i.muted array of yakcat ids , see <a class='insideLink' href="#endpoint_yakcat">the yakCat</a> endpoint to know how to get an id.
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>creationDate</b> : string,
									i.muted creation date of the place
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>lastModifDate</b> : date,
									i.muted last modification date of the place
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>location</b> : { lng : float, lat : float },
									i.muted place latitude and longitude
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>formatted_address</b> : string 
									i.muted human readable address ("Rue de Bagnolet, 75020 Paris, France")
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>address</b> : {
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>zip</b> : "75020", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>country</b> : "France", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>area</b> : "Ile-de-France", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>state</b> : "Paris", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>city</b> : "Paris", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>arr</b> : "20th arrondissement of Paris", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>street</b> : "Rue de Bagnolet", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>street_number</b> : "12" 
								div &nbsp;&nbsp;&nbsp;&nbsp;}, 
									i.muted an object address following gmap response format
								div &nbsp;&nbsp;&nbsp;&nbsp;<b>contact</b> : {
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>tel</b> : "0112345678", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>mobile</b> : "06012345678", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>mail</b> : "lemail@mail.com", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>transportation</b> : "Métro 2 station Jaurès", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>web</b> : "http://lesite.com", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>opening</b> : "Tous les jours sauf mardi de 8h à 12h", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>closing</b> : "Mardi", 
								div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>special_opening</b>: 'nocturne le vendredi'
								div &nbsp;&nbsp;&nbsp;&nbsp;}, 
								div }

					div#format_lightUser
						br
						br
						br
						pre
							div <b>lightUser</b> : {
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>_id</b> : string, 
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>name</b> : string,
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>login</b> : string,
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>userdetails</b> : string, 
								i.muted concatenation of the 2 former fields like this : "name (@login)"
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>thumb</b> : string,
							
					div#format_user
						br
						br
						br
						pre
							div <b>user</b> : {
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>_id</b> : string, 
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>name</b> : string,
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>bio</b> : string,
								i.muted user biography
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>thumb</b> : string,
								i.muted user's avatar url
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>web</b> : string,
								i.muted user's website url
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>login</b> : string,
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>name</b> : string,
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>mail</b> : string,
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>lastLoginDate</b> : string,
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>location</b> : { lng : float, lat : float },
								i.muted this data is used to set the default map's center
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>address</b> : {
							div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>zip</b> : "75020", 
							div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>country</b> : "France", 
							div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>area</b> : "Ile-de-France", 
							div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>state</b> : "Paris", 
							div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>city</b> : "Paris", 
							div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>arr</b> : "20th arrondissement of Paris", 
							div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>street</b> : "Rue de Bagnolet", 
							div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>street_number</b> : "12" 
							div &nbsp;&nbsp;&nbsp;&nbsp;}, 
								i.muted an object address following gmap response format
							div &nbsp;&nbsp;<b>favplace</b> : [lightPlace], 
								i.muted user's favorite places, array of <a class='insideLink' href="#format_lightPlace">lightPlace</a> objects
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>tagsubs</b> : [string] 
								i.muted user's tags to be able to be search on, array of strings
							div &nbsp;&nbsp;<b>usersubs</b> : [lightUser], 
								i.muted user follows news of this list of users, array of <a class='insideLink' href="#format_lightUser">lightUser</a> objects
							div }		

							
					div#format_yakcat
						br
						br
						br
						pre
							div <b>yakcat</b> : {
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>_id</b> : string, 
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>title</b> : string,
								i.muted the name of the category.
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>path</b> : string,
								i.muted human readable path to the category ( ex: Sport,  Football ).
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>pathN</b> : string, 
								i.muted normalized path to the category ( ex: SPORT#FOOTBALL ).
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>level</b> : int,
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>creationDate</b> : string,
							div &nbsp;&nbsp;&nbsp;&nbsp;<b>lastModifDate</b> : string,
						
        
					hr
					h3#endpoints Endpoints
					h4#endpoint_user User endpoints
					p 
						b Note:
						All endpoints are built to be RESTfull, but we also provide non RESTfull methods to access data. There are mentionned below for each endpoint.
					
					// USERS CREATE ACCOUNT
					h4#endpoint_usercreate Create a Yakwala account
					table.table.table-bordered  
						tr
							th METHODS
							th URL
							th DESCRIPTION
						tr
							td POST
							td /user/create<code>client-key</code>
							td Create an account and send an email with a validation key
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td POST : you need to provide your client key
									tr
										td Parameters :
											ul 
												li mail : string - the user email
												li client_key : string - your client key
												
									tr
										td Response :
											ul 
												li {meta:{code:200,token:xxxxxxx}} you need the token to validate the account
							
					// USERS VALIDATE ACCOUNT
					h4#endpoint_uservalidate Validate a Yakwala account
					table.table.table-bordered  
						tr
							th METHODS
							th URL
							th DESCRIPTION
						tr
							td POST
							td /user/validate<code>client-key</code>
							td Validate an account. The password of the new account is the key given at the creation of the account.
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td POST : you need to provide your client key
									tr
										td Parameters :
											ul 
												li token : string - the token send at the creation of the account
												li key : string - the key sent by email to the user
												li client_key : string - your client key
									tr
										td Response :
											ul 
												li {meta:{code:200}
						
						

					// USERS PROFILE
					h4#endpoint_userprofile Access and modify user's profile
					table.table.table-bordered  
						tr
							th METHODS
							th URL
							th DESCRIPTION
						tr
							td GET/PUT
							td /user/<code>user-id</code>
							td Get the user's data details.<br> Note : you cannot delete user accounts with the api. 
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : do not need access token
									tr
										td Parameters :
											ul 
												li v:int - the version of the api - <b>default: </b> the last version
												li local:string - response language - <b>default: </b>  'fr'
									tr
										td Response :
											ul 
												li user : { JSON object } , ( see <a class='insideLink' href="#format_user">user formats</a> for exact reference )
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td PUT : need access token
									tr
										td Parameters:
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>user :</b> JSON object {
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>name</b>: string,
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>mail</b>: string,
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>bio</b>: string,
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>web</b>: string,
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>tag</b>: string,
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>formatted_address</b>: string, 
													i.muted human readable address
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>location</b> : { lng : float, lat : float }, 
													i.muted this data is used to set the default map's center
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>address</b> : {
												div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>zip</b> : "75020", 
												div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>country</b> : "France", 
												div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>area</b> : "Ile-de-France", 
												div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>state</b> : "Paris", 
												div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>city</b> : "Paris", 
												div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>arr</b> : "20th arrondissement of Paris", 
												div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>street</b> : "Rue de Bagnolet", 
												div &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>street_number</b> : "12" 
												div &nbsp;&nbsp;&nbsp;&nbsp;}, 
												li <b>picture :</b> posted image 
													i.muted The photo should be uploaded as a jpeg and the Content-Type should be set to "image/jpeg". Images may not exceed 5MB in size.
									tr
										td Response:
											ul
												li Standard <a class='insideLink' href="#format_response">response format</a>
									tr
										td Non RESTfull method in POST : /api/updateuser/<code>userid</code>
											

						
					
							
									
					
								
					// USER SUBSCRIBTIONS TO USERS
					h4#endpoint_useralert_user Manage alerts : subscribe to a user feed				
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
			
						tr	
							td POST/GET/DELETE/PUT
							td /subscribe/user/<code>user-id</code>
							td subscribe to a user's feed
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : list user's subscribtion to other users
									tr
										td Parameters :
											ul
												li v=1 - the version of the api
												li local=  'fr' - response language
										td Response
											div Array of <a class='insideLink' href="#format_lightUser">lightUser</a> objects
								table.table.table-bordered
									tr
										td POST : create a subscribtion to a user feed
									tr
										td Parameters :
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>usersubs</b>: [string] Array of user ids
										td Response
											div returns the code 200 if operation succeeded
										
								table.table.table-bordered
									tr
										td PUT : update a user's subscribtion to other users
									tr
										td Parameters :
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>usersubs</b>: [string] Array of user ids
										td Response
											li returns the code 200 if operation succeeded
										td Non RESTfull method in POST : /api/updatesubscribe/user/<code>userid</code>
								table.table.table-bordered
									tr
										td DELETE : delete one user's subscribtion to another user
									tr
										td Parameters :
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>usersubs</b>: string - the user id to delete
										td Response
											li returns the code 200 if operation succeeded
										td Non RESTfull method in POST : /api/unsubscribe/user/<code>userid</code>			
						
					// USER SUBSCRIBTIONS TO TAGS
					h4#endpoint_useralert_tag Manage alerts : subscribe to a tag
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
							
						tr	
							td POST/GET/DELETE/PUT
							td /subscribe/tags/<code>user-id</code>
							td#highlight subscribe to an alert on a tag
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : list user's subscribtion tags
									tr
										td Parameters :
											ul
												li v=1 - the version of the api
												li local=  'fr' - response language
										td Response
											div Array of strings.
								table.table.table-bordered
									tr
										td POST : create an alert on a tag
									tr
										td Parameters :
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>tagsubs</b>: Array of strings : ["tag1","tag2","tag3"]
										td Response
											div returns the code 200 if operation succeeded
										
								table.table.table-bordered
									tr
										td PUT : update a user's tag list
									tr
										td Parameters :
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>tagsubs</b>: Array of strings : ["tag1","tag2","tag3"]
										td Response
											li returns the code 200 if operation succeeded
										td Non RESTfull method in POST : /api/updatesubscribe/tag/<code>userid</code>
								table.table.table-bordered
									tr
										td DELETE : delete one user's subscribtion to a tag alert
									tr
										td Parameters :
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>usersubs</b>: string ( the name of the tag)
										td Response
											li returns the code 200 if operation succeeded
										td Non RESTfull method in POST : /api/unsubscribe/tag/<code>userid</code>	

					// USER FAVPLACE	
					h4#endpoint_userfavplace Manage user's favorite places			
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
			
						tr	
							td POST/GET/DELETE/PUT
							td /api/favplace/<code>user-id</code>
							td Manage user's favorite places
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : list user's favorite places
									tr
										td Parameters :
											ul
												li v=1 - the version of the api
												li local=  'fr' - response language
										td Response
											div Array of <a class='insideLink' href="#format_lightPlace">lightPlace</a> objects
								table.table.table-bordered
									tr
										td POST : create a favorite place
									tr
										td Parameters :
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>favplace</b>: Array of JSON objects <a class='insideLink' href="#format_lightPlace">lightPlace</a> objects
										td Response
											div returns the code 200 if operation succeeded
										
								table.table.table-bordered
									tr
										td PUT : update a user's favorite place
									tr
										td Parameters :
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>favplace</b>: Array of JSON lightPlace objects.
										td Response
											li returns the code 200 if operation succeeded
										td Non RESTfull method in POST : /api/updatefavplace/<code>userid</code>
								table.table.table-bordered
									tr
										td DELETE : delete one user's favorite place
									tr
										td Parameters :
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>favplace</b>: string - id of the favplace to delete
										td Response
											li returns the code 200 if operation succeeded
										td Non RESTfull method in POST : /api/delfavplace/<code>userid</code>	


										
					h3#endpoint_info Info endpoints
					// INFO ADD
					h4#endpoint_userfeed List, create, modify, delete infos on behalf of a user
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
						tr
							td GET/POST/DELETE/PUT
							td /users/feed/<code>user-id</code>
							td Manage the authenticated user's news feed.
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : list news posted by the user
									tr
										td Parameters :
											ul 
												li limit:int - number of news to get
												li skip:int - starting row
												li v:int - the version of the api - <b>default:</b> the last version
												li local:string - response language - <b>default:</b>  'fr'
									tr
										td Response :
											ul
												li Array of <a class='insideLink' href="#format_info">info</a> objects
								table.table.table-bordered
									tr
										td POST/PUT : 
									tr
										td Paramaters:
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token
												li <b>info</b> : JSON object 
													div {
													div &nbsp;&nbsp;<b>_id</b> : string, 
														i.muted news id ( <b>required for the update only )</b>)
													div &nbsp;&nbsp; <b>title</b> : string, 
														i.muted news title  - <b>required</b>
													div &nbsp;&nbsp; <b>placeid</b> : string, 
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp;<b>Required if address and location are empty</b>
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp;News can be linked to a place id ( see the /api/place to create a place
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp;<b>default :</b> 0
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp; =>if this id is set, you do not need to provide address and location
													div &nbsp;&nbsp; <b>location</b> : array(lat,lng): {lat:float,lng:float}, 
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp;<b>required if placeid is empty</b> 
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp;the geographical location of the news
													div &nbsp;&nbsp; <b>address</b> : string, 
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp;<b>required if placeid is empty</b> 
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp;the human redable address string
													div &nbsp;&nbsp; <b>content</b> : string, 
														i.muted news main content - <b>default :</b> empty
													div &nbsp;&nbsp; <b>print</b> : boolean, 
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp; 0 => the news appears only on the news feed and not on the map
														div 
															i.muted &nbsp;&nbsp;&nbsp;&nbsp;1 => the news appears on the news feed and on the map
															i.muted - <b>default :</b> 1
													div &nbsp;&nbsp; <b>pubdate</b> : date, 
														i.muted date to be published, Unix timestamp - <b>default :</b> now
													div &nbsp;&nbsp; <b>dateEndPrint</b> : date, 
														i.muted date of the end of the news, - <b>default :</b> now + 3 days
														div
															i.muted &nbsp;&nbsp;&nbsp;&nbsp; every item has a limited lifetime begining at pubDate and ending at dateEndPrint
															div
																i.muted &nbsp;&nbsp;&nbsp;&nbsp;<b>This param cannot be set for normal users, reserved to premium accounts</b>
													div &nbsp;&nbsp; <b>yaktype</b> : int, 
														i.muted &nbsp;&nbsp;&nbsp;&nbsp; Yakwala type
														i.muted 
															div &nbsp;&nbsp;&nbsp;&nbsp; Values allowed are :
																ul
																	li for a normal user : Discussion = 4
																	li for a premium media user : Actu = 1 , Agenda = 2 , Info Pratique = 3 , Discussion = 4
																	li for any other premium account : Agenda = 2 , Info Pratique = 3 , Discussion = 4
													div &nbsp;&nbsp;<b>freetag</b> : [string,string], 
														i.muted array of string tags 
													div &nbsp;&nbsp;<b>yakCat</b> : ['id1xxxx','id2xxxx'], 
														i.muted array of Yakwala categories <a class='insideLink' href="#endpoint_yakcatsearch"> see here to search in Yakcats</a>
													}
												li <b>picture</b> : posted image 
													i.muted The photo should be uploaded as a jpeg and the Content-Type should be set to "image/jpeg". Images may not exceed 5MB in size.
												li v:int - the version of the api - <b>default:</b> the last version
												li local:string - response language - <b>default:</b>  'fr'
									tr
										td Response:
											ul
												li returns the code 200 if operation succeeded or a <a class='insideLink' href="#format_response">standard error</a> object if failed
									tr
										td Non RESTfull method in POST : /api/user/updatefeed/<code>userid</code>
									
									table.table.table-bordered
										tr
											td DELETE : delete one info
										tr
											td Paramaters:
												ul
													li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
													li <b>info :</b> string - the info id to delete
										tr
											td Response:
												li returns the code 200 if operation succeeded
										tr
											td Non RESTfull method in POST : /api/user/delfeed/<code>userid</code>
					
					
					h4#endpoint_infocomments Manage Info Comments
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
			
						tr	
							td POST
							td /setComment</code>
							td Manage Info Comments
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td POST : create a new info comment
									tr
										td Parameters :
											ul
												li <b>infoId:</b> id of the related info
												li <b>username</b>: user.login
												li <b>userthumb</b>: user.thumb
												li <b>comment</b>: the comment text
										td Response
											div returns 'updated' if operation succeeded

					h4#endpoint_infolikes Manage Info likes
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
			
						tr	
							td POST
							td /setLikes</code>
							td Manage Info Likes
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td POST : create a new info like or dislike
									tr
										td Parameters :
											ul
												li <b>infoId :</b> id of the related info
												li <b>islike</b>: 'like' or 'dislike'
										td Response
											div returns 'updated' if operation succeeded
										

					
					h3#endpoint_search Search

					// USER SEARCH
					h4#endpoint_usersearch Search a user by name
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
			
						tr	
							td GET
							td /users/search/<code>string</code>
							td Search for a user by name.
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : list news posted by the user
									tr
										td Parameters :
											ul
												li limit:int - limit the number of results
												li skip:int - start results number
												li sensitive: 1/0 - perform a case sensitive if set to 1, <b>default</b> : 0 => not sensitive
												li v=1 - the version of the api
												li local=  'fr' - response language
										tr
											td Response:
												div Array of <a class='insideLink' href="#format_lightUser">lightUser</a> objects


					h4#endpoint_infosearch Search in infos
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
			
						tr	
							td GET
							td /api/geoinfos
							td Search infos in a box
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : 
									tr
										td Parameters :
											ul
												li 
													code /api/geoinfos/bl.lat/bl.lng/tr.lat/tr.lng/secondsFromNow/now/type,type,type/searchString
												li bl.lat : latitude of the bottom left point
												li bl.lng : longitude of the bottom left point
												li tr.lat : latitude of the top right point
												li tr.lng : longitude of the top right point
												li secondsFromNow : number of seconds. Negative for the past and positive for the future.
												i.muted Ex : to search info from yesterday : - 1 * 24 * 60 * 60
												br
												i.muted Ex : to search info in 2 days and half : 2.5 * 24 * 60 * 60 
												li now : timestamp. If it is different from 0, we retrive only data created after this timestamp
												i.muted This param should be set for live update : at pahe loading, get the current timestamp, and call this url with now set to 0. After, to update your list of news without reloading your page, and without getting all news, you have to set this parameter to the timestamp you saved at loading. Thus it will retrieve only data created after you page was loaded. Simply append the new items to your list.
												li type : a list of coma-separated int
													ul
														li 1 : Actu
														li 2 : Agenda
														li 3 : Discussion 
														li 4 : Info Pratique
												li searchString : string to search for in title and descriptions of infos. Send 'null' to get all news.
									tr			
										td Response
											div Array of <a class='insideLink' href="#format_info">Info</a> objects
					

					h4#endpoint_placesearch Search in places
					// PLACE SEARCH	
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
			
						tr	
							td GET
							td /place/search/<code>string</code>
							td Search for a place by name.
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET:
									tr 
										td Parameters:
											ul
												li limit:int - limit the number of results
												li skip:int - start results number
												li sensitive: 1/0 - perform a case sensitive if set to 1, <b>default</b> : 0 => not sensitive
												li v=1 - the version of the api
												li local=  'fr' - response language
						tr
							td(colspan=3)
								b response:
								ul
									li array of objects Place ( see <a class='insideLink' href="#format_place">Formats</a> for exact reference )						
											

						
					h4#endpoint_yakcat Search in categories ( yakcat )
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
			
						tr	
							td GET
							td /api/cat/search/<code>string</code>
							td Search in Yakwala categories
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : 
									tr
										td Parameters :
											ul
												li 
													code /api/cat/search/searchString
												li searchString : string to search for in cat's title 
												li limit:int - number of news to get
												li skip:int - starting row
												li v:int - the version of the api - <b>default:</b> the last version
												li local:string - response language - <b>default:</b>  'fr'
									tr			
										td Response
											div Array of <a class='insideLink' href="#format_yakcat">Yakcat</a> objects
						

					h4#endpoint_tagsearch Search in tags
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
			
						tr	
							td GET
							td /api/tag/search/<code>string</code>
							td Search in Yakwala tags
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : 
									tr
										td Parameters :
											ul
												li 
													code /api/cat/search/searchString
												li searchString : string to search for in tag's title.
												li limit:int - number of news to get
												li skip:int - starting row
												li sort:string - orde to sort
													i.muted Values : 'lastUsed' or 'mostUsed' - default:'mostUsed'
												li v:int - the version of the api - <b>default:</b> the last version
												li local:string - response language - <b>default:</b>  'fr'

									tr			
										td Response
											div Array of <a class='insideLink' href="#format_yakcat">Yakcat</a> objects						
					


					// PLACE
					h3#endpoint_place  Place endpoints
					h4 Manage places : create, modify, update, delete
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
						tr
							td GET/POST/DELETE/PUT
							td /place/<code>user-id</code>
							td Manage a place
						tr
							td(colspan=3)
								table.table.table-bordered
									tr
										td GET : ( you can omit the userid param in the GET request. ) list places 

									tr
										td Parameters : (do not forget to urlencode your parameters)
											ul 
												li <b>place</b> : an array of ids ['xxx','yyyy'] or an array of _id objects : [{_id:xxx},{_id:yyy}] 
												li v:int - the version of the api - <b>default:</b>  the last version
												li local:string - response language - <b>default:</b>   'fr'
									tr
										td Response :
											ul
												li Array of <a class='insideLink' href="#format_place">place</a> objects
								table.table.table-bordered
									tr
										td POST/PUT : 
									tr
										td 
											i Note :
											div If you try to create a place that already exists in the neighborhood, we will return the existing place.
									tr
										td Paramaters:
											ul
												li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
												li <b>place</b> : JSON object 
												{
												div &nbsp;&nbsp;<b>_id</b> : string, 
													i.muted place id (<b>*required only for the update</b>)												
												div &nbsp;&nbsp;<b>title</b> : string, 
													i.muted place title (<b>*required</b>)
												div &nbsp;&nbsp;<b>location</b> : { lng : float, lat : float }, 
													i.muted a latitude / longitude object (<b>*required</b>)
												div &nbsp;&nbsp;<b>content</b> : string, 
													i.muted place main content, <b>default</b> : empty
												div &nbsp;&nbsp;<b>yakcat</b> : array of strings : ['id1xxxx','id2xxxx'], 
													i.muted array of Yakwala categories, <b>default</b> : empty
												div &nbsp;&nbsp;<b>freetag</b> : array of strings : [string,string], 
													i.muted array of string tags, <b>default</b> : empty array
												div &nbsp;&nbsp;<b>outgoinglink</b> : string, 
													i.muted place link on the web, <b>default</b> : empty
												div &nbsp;&nbsp;<b>formatted_address</b> : string, 
													i.muted human readable address of the place, <b>default</b> : empty
												div &nbsp;&nbsp;<b>address</b> : {
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>zip</b> : "75020", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>country</b> : "France", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>area</b> : "Ile-de-France", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>state</b> : "Paris", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>city</b> : "Paris", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>arr</b> : "20th arrondissement of Paris", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>street</b> : "Rue de Bagnolet", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>street_number</b> : "12" 
												div &nbsp;&nbsp;}, 
													i.muted an object address following gmap response format,  <b>default</b> : empty
												div &nbsp;&nbsp;<b>contact</b> : {
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>tel</b> : "0112345678", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>mobile</b> : "06012345678", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>mail</b> : "lemail@mail.com", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>transportation</b> : "Métro 2 station Jaurès", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>web</b> : "http://lesite.com", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>opening</b> : "Tous les jours sauf mardi de 8h à 12h", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>closing</b> : "Mardi", 
												div &nbsp;&nbsp;&nbsp;&nbsp;<b>special_opening</b>: 'nocturne le vendredi'
												div &nbsp;&nbsp;}, 
													i.muted a contact object ,  <b>default</b> : empty
												}
												li <b>picture</b> : posted image 
													i.muted The photo should be uploaded as a jpeg and the Content-Type should be set to "image/jpeg". Images may not exceed 5MB in size.
												li v:int - the version of the api - <b>default:</b> the last version
												li local:string - response language - <b>default:</b>  'fr'
									tr
										td Response:
											ul
												li returns the code 200 if operation succeeded or a <a class='insideLink' href="#format_response">standard error</a> object if failed
									tr
										td Non RESTfull method in POST : /api/updateplace/<code>userid</code>
									
									table.table.table-bordered
										tr
											td DELETE : delete a place
										tr
											td Paramaters:
												ul
													li <b>access_token :</b> see the <a class='insideLink' href="#authentification">authentification doc</a> to get a valid token.
													li <b>place :</b> placeid
										tr
											td Response:
												li returns the code 200 if operation succeeded
										tr
											td Non RESTfull method in POST : /api/delplace/<code>userid</code>
					h4 Get one place
					table.table.table-bordered
						tr
							th METHODS
							th URL
							th DESCRIPTION
						tr
							td GET
							td /thisplace/<code>place-id</code>
							td Get details of one place
					
					

					
					hr
					h3#librairies Librairies
					p We provide you with some libraries to handle the api.
					
					h4 PHP
					pre https://github.com/rebe100x/API
					pre git clone git@github.com:rebe100x/API.git
					br
					br
					hr
					h3#cgu Conditions d'utilisation
						p.subheader
					@todo
			div.span2				
	script
		$(document).ready(function() {
		
		}); // END READY

